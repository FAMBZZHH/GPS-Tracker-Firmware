
learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005670  08005670  00015670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005718  08005718  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  08005718  08005718  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005718  08005718  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005718  08005718  00015718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800571c  0800571c  0001571c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08005720  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          000005e0  20000100  20000100  00020100  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200006e0  200006e0  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 14 .debug_info   000116fd  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000235c  00000000  00000000  00031870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000da0  00000000  00000000  00033bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000aa0  00000000  00000000  00034970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e198  00000000  00000000  00035410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000138f5  00000000  00000000  000535a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b3960  00000000  00000000  00066e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003da0  00000000  00000000  0011a800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0011e5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005654 	.word	0x08005654

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	08005654 	.word	0x08005654

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa4:	f000 ff06 	bl	80018b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa8:	f000 f81e 	bl	8000ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aac:	f000 f94e 	bl	8000d4c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ab0:	f000 f87e 	bl	8000bb0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ab4:	f000 f8ba 	bl	8000c2c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000ab8:	f000 f926 	bl	8000d08 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 8000abc:	f000 f8f4 	bl	8000ca8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8000ac0:	bf00      	nop
 8000ac2:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <main+0x40>)
 8000ac4:	f000 f9c5 	bl	8000e52 <MPU6050_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d0f9      	beq.n	8000ac2 <main+0x22>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8000ace:	4905      	ldr	r1, [pc, #20]	; (8000ae4 <main+0x44>)
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <main+0x40>)
 8000ad2:	f000 fa15 	bl	8000f00 <MPU6050_Read_All>
	  //GET ACCELEROMETER TO SEE IF THE DEVICE HAS MOVED

	  HAL_Delay (100);
 8000ad6:	2064      	movs	r0, #100	; 0x64
 8000ad8:	f000 ff52 	bl	8001980 <HAL_Delay>
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8000adc:	e7f7      	b.n	8000ace <main+0x2e>
 8000ade:	bf00      	nop
 8000ae0:	2000011c 	.word	0x2000011c
 8000ae4:	20000548 	.word	0x20000548

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b09e      	sub	sp, #120	; 0x78
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000af2:	2228      	movs	r2, #40	; 0x28
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f004 fa01 	bl	8004efe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	223c      	movs	r2, #60	; 0x3c
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f004 f9f3 	bl	8004efe <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b1c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b20:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b26:	2301      	movs	r3, #1
 8000b28:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b2a:	2310      	movs	r3, #16
 8000b2c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b36:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b3c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b42:	4618      	mov	r0, r3
 8000b44:	f002 f898 	bl	8002c78 <HAL_RCC_OscConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000b4e:	f000 f97b 	bl	8000e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b52:	230f      	movs	r3, #15
 8000b54:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b56:	2302      	movs	r3, #2
 8000b58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f003 f8c0 	bl	8003cf4 <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b7a:	f000 f965 	bl	8000e48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <SystemClock_Config+0xc4>)
 8000b80:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b90:	463b      	mov	r3, r7
 8000b92:	4618      	mov	r0, r3
 8000b94:	f003 fae4 	bl	8004160 <HAL_RCCEx_PeriphCLKConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b9e:	f000 f953 	bl	8000e48 <Error_Handler>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3778      	adds	r7, #120	; 0x78
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	00020021 	.word	0x00020021

08000bb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <MX_I2C1_Init+0x74>)
 8000bb6:	4a1c      	ldr	r2, [pc, #112]	; (8000c28 <MX_I2C1_Init+0x78>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_I2C1_Init+0x74>)
 8000bbc:	f240 220b 	movw	r2, #523	; 0x20b
 8000bc0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_I2C1_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_I2C1_Init+0x74>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_I2C1_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_I2C1_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_I2C1_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_I2C1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_I2C1_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <MX_I2C1_Init+0x74>)
 8000bee:	f001 f963 	bl	8001eb8 <HAL_I2C_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bf8:	f000 f926 	bl	8000e48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4809      	ldr	r0, [pc, #36]	; (8000c24 <MX_I2C1_Init+0x74>)
 8000c00:	f001 fed0 	bl	80029a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000c0a:	f000 f91d 	bl	8000e48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_I2C1_Init+0x74>)
 8000c12:	f001 ff12 	bl	8002a3a <HAL_I2CEx_ConfigDigitalFilter>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000c1c:	f000 f914 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000011c 	.word	0x2000011c
 8000c28:	40005400 	.word	0x40005400

08000c2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <MX_SPI1_Init+0x74>)
 8000c32:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <MX_SPI1_Init+0x78>)
 8000c34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_SPI1_Init+0x74>)
 8000c38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_SPI1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_SPI1_Init+0x74>)
 8000c46:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_SPI1_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_SPI1_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_SPI1_Init+0x74>)
 8000c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_SPI1_Init+0x74>)
 8000c62:	2208      	movs	r2, #8
 8000c64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_SPI1_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_SPI1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_SPI1_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_SPI1_Init+0x74>)
 8000c7a:	2207      	movs	r2, #7
 8000c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_SPI1_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_SPI1_Init+0x74>)
 8000c86:	2208      	movs	r2, #8
 8000c88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_SPI1_Init+0x74>)
 8000c8c:	f003 fc18 	bl	80044c0 <HAL_SPI_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c96:	f000 f8d7 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000170 	.word	0x20000170
 8000ca4:	40013000 	.word	0x40013000

08000ca8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cae:	4a15      	ldr	r2, [pc, #84]	; (8000d04 <MX_USART1_UART_Init+0x5c>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cec:	f003 fc93 	bl	8004616 <HAL_UART_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cf6:	f000 f8a7 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200001d4 	.word	0x200001d4
 8000d04:	40013800 	.word	0x40013800

08000d08 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <MX_USB_PCD_Init+0x3c>)
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <MX_USB_PCD_Init+0x40>)
 8000d10:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_USB_PCD_Init+0x3c>)
 8000d14:	2208      	movs	r2, #8
 8000d16:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <MX_USB_PCD_Init+0x3c>)
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_USB_PCD_Init+0x3c>)
 8000d20:	2202      	movs	r2, #2
 8000d22:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <MX_USB_PCD_Init+0x3c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_USB_PCD_Init+0x3c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_USB_PCD_Init+0x3c>)
 8000d32:	f001 fece 	bl	8002ad2 <HAL_PCD_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000d3c:	f000 f884 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	2000025c 	.word	0x2000025c
 8000d48:	40005c00 	.word	0x40005c00

08000d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d62:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <MX_GPIO_Init+0xf4>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	4a36      	ldr	r2, [pc, #216]	; (8000e40 <MX_GPIO_Init+0xf4>)
 8000d68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d6c:	6153      	str	r3, [r2, #20]
 8000d6e:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <MX_GPIO_Init+0xf4>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <MX_GPIO_Init+0xf4>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	4a30      	ldr	r2, [pc, #192]	; (8000e40 <MX_GPIO_Init+0xf4>)
 8000d80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d84:	6153      	str	r3, [r2, #20]
 8000d86:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <MX_GPIO_Init+0xf4>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d92:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <MX_GPIO_Init+0xf4>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	4a2a      	ldr	r2, [pc, #168]	; (8000e40 <MX_GPIO_Init+0xf4>)
 8000d98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d9c:	6153      	str	r3, [r2, #20]
 8000d9e:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <MX_GPIO_Init+0xf4>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <MX_GPIO_Init+0xf4>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a24      	ldr	r2, [pc, #144]	; (8000e40 <MX_GPIO_Init+0xf4>)
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	6153      	str	r3, [r2, #20]
 8000db6:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <MX_GPIO_Init+0xf4>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <MX_GPIO_Init+0xf4>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	4a1e      	ldr	r2, [pc, #120]	; (8000e40 <MX_GPIO_Init+0xf4>)
 8000dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dcc:	6153      	str	r3, [r2, #20]
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <MX_GPIO_Init+0xf4>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000de0:	4818      	ldr	r0, [pc, #96]	; (8000e44 <MX_GPIO_Init+0xf8>)
 8000de2:	f001 f851 	bl	8001e88 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000de6:	2337      	movs	r3, #55	; 0x37
 8000de8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4812      	ldr	r0, [pc, #72]	; (8000e44 <MX_GPIO_Init+0xf8>)
 8000dfc:	f000 feca 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000e00:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000e04:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	480a      	ldr	r0, [pc, #40]	; (8000e44 <MX_GPIO_Init+0xf8>)
 8000e1a:	f000 febb 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f000 feae 	bl	8001b94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40021000 	.word	0x40021000
 8000e44:	48001000 	.word	0x48001000

08000e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4c:	b672      	cpsid	i
}
 8000e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <Error_Handler+0x8>

08000e52 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b088      	sub	sp, #32
 8000e56:	af04      	add	r7, sp, #16
 8000e58:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000e5a:	2364      	movs	r3, #100	; 0x64
 8000e5c:	9302      	str	r3, [sp, #8]
 8000e5e:	2301      	movs	r3, #1
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	f107 030f 	add.w	r3, r7, #15
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	2275      	movs	r2, #117	; 0x75
 8000e6c:	21d0      	movs	r1, #208	; 0xd0
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f001 f9c6 	bl	8002200 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	2b68      	cmp	r3, #104	; 0x68
 8000e78:	d13d      	bne.n	8000ef6 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000e7e:	2364      	movs	r3, #100	; 0x64
 8000e80:	9302      	str	r3, [sp, #8]
 8000e82:	2301      	movs	r3, #1
 8000e84:	9301      	str	r3, [sp, #4]
 8000e86:	f107 030e 	add.w	r3, r7, #14
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	226b      	movs	r2, #107	; 0x6b
 8000e90:	21d0      	movs	r1, #208	; 0xd0
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f001 f8a0 	bl	8001fd8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000e9c:	2364      	movs	r3, #100	; 0x64
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	f107 030e 	add.w	r3, r7, #14
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	2219      	movs	r2, #25
 8000eae:	21d0      	movs	r1, #208	; 0xd0
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f001 f891 	bl	8001fd8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000eba:	2364      	movs	r3, #100	; 0x64
 8000ebc:	9302      	str	r3, [sp, #8]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	f107 030e 	add.w	r3, r7, #14
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	221c      	movs	r2, #28
 8000ecc:	21d0      	movs	r1, #208	; 0xd0
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f001 f882 	bl	8001fd8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000ed8:	2364      	movs	r3, #100	; 0x64
 8000eda:	9302      	str	r3, [sp, #8]
 8000edc:	2301      	movs	r3, #1
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	f107 030e 	add.w	r3, r7, #14
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	221b      	movs	r2, #27
 8000eea:	21d0      	movs	r1, #208	; 0xd0
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f001 f873 	bl	8001fd8 <HAL_I2C_Mem_Write>
        return 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <MPU6050_Init+0xa6>
    }
    return 1;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8000f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f04:	b094      	sub	sp, #80	; 0x50
 8000f06:	af04      	add	r7, sp, #16
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8000f0c:	2364      	movs	r3, #100	; 0x64
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	230e      	movs	r3, #14
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	223b      	movs	r2, #59	; 0x3b
 8000f1e:	21d0      	movs	r1, #208	; 0xd0
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f001 f96d 	bl	8002200 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8000f26:	7a3b      	ldrb	r3, [r7, #8]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	7a7b      	ldrb	r3, [r7, #9]
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8000f38:	7abb      	ldrb	r3, [r7, #10]
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	7afb      	ldrb	r3, [r7, #11]
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8000f4a:	7b3b      	ldrb	r3, [r7, #12]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	7b7b      	ldrb	r3, [r7, #13]
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	4313      	orrs	r3, r2
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8000f5c:	7bbb      	ldrb	r3, [r7, #14]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8000f6a:	7c3b      	ldrb	r3, [r7, #16]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	7c7b      	ldrb	r3, [r7, #17]
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8000f7c:	7cbb      	ldrb	r3, [r7, #18]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	7cfb      	ldrb	r3, [r7, #19]
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8000f8e:	7d3b      	ldrb	r3, [r7, #20]
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	b21a      	sxth	r2, r3
 8000f94:	7d7b      	ldrb	r3, [r7, #21]
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b21a      	sxth	r2, r3
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fa60 	bl	800046c <__aeabi_i2d>
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	4bbd      	ldr	r3, [pc, #756]	; (80012a8 <MPU6050_Read_All+0x3a8>)
 8000fb2:	f7ff fbef 	bl	8000794 <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	6839      	ldr	r1, [r7, #0]
 8000fbc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fa50 	bl	800046c <__aeabi_i2d>
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	4bb5      	ldr	r3, [pc, #724]	; (80012a8 <MPU6050_Read_All+0x3a8>)
 8000fd2:	f7ff fbdf 	bl	8000794 <__aeabi_ddiv>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	6839      	ldr	r1, [r7, #0]
 8000fdc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fa40 	bl	800046c <__aeabi_i2d>
 8000fec:	a3a8      	add	r3, pc, #672	; (adr r3, 8001290 <MPU6050_Read_All+0x390>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	f7ff fbcf 	bl	8000794 <__aeabi_ddiv>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	6839      	ldr	r1, [r7, #0]
 8000ffc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001000:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001004:	ee07 3a90 	vmov	s15, r3
 8001008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80012ac <MPU6050_Read_All+0x3ac>
 8001010:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001014:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80012b0 <MPU6050_Read_All+0x3b0>
 8001018:	ee77 7a87 	vadd.f32	s15, s15, s14
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fa1f 	bl	800046c <__aeabi_i2d>
 800102e:	a39a      	add	r3, pc, #616	; (adr r3, 8001298 <MPU6050_Read_All+0x398>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff fbae 	bl	8000794 <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	6839      	ldr	r1, [r7, #0]
 800103e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa0f 	bl	800046c <__aeabi_i2d>
 800104e:	a392      	add	r3, pc, #584	; (adr r3, 8001298 <MPU6050_Read_All+0x398>)
 8001050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001054:	f7ff fb9e 	bl	8000794 <__aeabi_ddiv>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	6839      	ldr	r1, [r7, #0]
 800105e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff f9ff 	bl	800046c <__aeabi_i2d>
 800106e:	a38a      	add	r3, pc, #552	; (adr r3, 8001298 <MPU6050_Read_All+0x398>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff fb8e 	bl	8000794 <__aeabi_ddiv>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	6839      	ldr	r1, [r7, #0]
 800107e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001082:	f000 fc71 	bl	8001968 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	4b8a      	ldr	r3, [pc, #552]	; (80012b4 <MPU6050_Read_All+0x3b4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f9dc 	bl	800044c <__aeabi_ui2d>
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	4b87      	ldr	r3, [pc, #540]	; (80012b8 <MPU6050_Read_All+0x3b8>)
 800109a:	f7ff fb7b 	bl	8000794 <__aeabi_ddiv>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80010a6:	f000 fc5f 	bl	8001968 <HAL_GetTick>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a81      	ldr	r2, [pc, #516]	; (80012b4 <MPU6050_Read_All+0x3b4>)
 80010ae:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b6:	461a      	mov	r2, r3
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010be:	fb03 f202 	mul.w	r2, r3, r2
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010c8:	4619      	mov	r1, r3
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010d0:	fb01 f303 	mul.w	r3, r1, r3
 80010d4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f9c8 	bl	800046c <__aeabi_i2d>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	ec43 2b10 	vmov	d0, r2, r3
 80010e4:	f003 ff40 	bl	8004f68 <sqrt>
 80010e8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010f8:	f7ff fc8a 	bl	8000a10 <__aeabi_dcmpeq>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d11f      	bne.n	8001142 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f9af 	bl	800046c <__aeabi_i2d>
 800110e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001112:	f7ff fb3f 	bl	8000794 <__aeabi_ddiv>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	ec43 2b17 	vmov	d7, r2, r3
 800111e:	eeb0 0a47 	vmov.f32	s0, s14
 8001122:	eef0 0a67 	vmov.f32	s1, s15
 8001126:	f003 ff4b 	bl	8004fc0 <atan>
 800112a:	ec51 0b10 	vmov	r0, r1, d0
 800112e:	a35c      	add	r3, pc, #368	; (adr r3, 80012a0 <MPU6050_Read_All+0x3a0>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff fa04 	bl	8000540 <__aeabi_dmul>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001140:	e005      	b.n	800114e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	f04f 0300 	mov.w	r3, #0
 800114a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001154:	425b      	negs	r3, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f988 	bl	800046c <__aeabi_i2d>
 800115c:	4682      	mov	sl, r0
 800115e:	468b      	mov	fp, r1
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f980 	bl	800046c <__aeabi_i2d>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	ec43 2b11 	vmov	d1, r2, r3
 8001174:	ec4b ab10 	vmov	d0, sl, fp
 8001178:	f003 fef4 	bl	8004f64 <atan2>
 800117c:	ec51 0b10 	vmov	r0, r1, d0
 8001180:	a347      	add	r3, pc, #284	; (adr r3, 80012a0 <MPU6050_Read_All+0x3a0>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff f9db 	bl	8000540 <__aeabi_dmul>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	4b49      	ldr	r3, [pc, #292]	; (80012bc <MPU6050_Read_All+0x3bc>)
 8001198:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800119c:	f7ff fc42 	bl	8000a24 <__aeabi_dcmplt>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00a      	beq.n	80011bc <MPU6050_Read_All+0x2bc>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <MPU6050_Read_All+0x3c0>)
 80011b2:	f7ff fc55 	bl	8000a60 <__aeabi_dcmpgt>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d114      	bne.n	80011e6 <MPU6050_Read_All+0x2e6>
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b3f      	ldr	r3, [pc, #252]	; (80012c0 <MPU6050_Read_All+0x3c0>)
 80011c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011c6:	f7ff fc4b 	bl	8000a60 <__aeabi_dcmpgt>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d015      	beq.n	80011fc <MPU6050_Read_All+0x2fc>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	4b38      	ldr	r3, [pc, #224]	; (80012bc <MPU6050_Read_All+0x3bc>)
 80011dc:	f7ff fc22 	bl	8000a24 <__aeabi_dcmplt>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00a      	beq.n	80011fc <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 80011e6:	4937      	ldr	r1, [pc, #220]	; (80012c4 <MPU6050_Read_All+0x3c4>)
 80011e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011ec:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011f6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80011fa:	e014      	b.n	8001226 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001202:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001206:	eeb0 1a47 	vmov.f32	s2, s14
 800120a:	eef0 1a67 	vmov.f32	s3, s15
 800120e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001212:	482c      	ldr	r0, [pc, #176]	; (80012c4 <MPU6050_Read_All+0x3c4>)
 8001214:	f000 f85a 	bl	80012cc <Kalman_getAngle>
 8001218:	eeb0 7a40 	vmov.f32	s14, s0
 800121c:	eef0 7a60 	vmov.f32	s15, s1
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800122c:	4690      	mov	r8, r2
 800122e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <MPU6050_Read_All+0x3c0>)
 8001238:	4640      	mov	r0, r8
 800123a:	4649      	mov	r1, r9
 800123c:	f7ff fc10 	bl	8000a60 <__aeabi_dcmpgt>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d008      	beq.n	8001258 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800124c:	4614      	mov	r4, r2
 800124e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800125e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001262:	eeb0 1a47 	vmov.f32	s2, s14
 8001266:	eef0 1a67 	vmov.f32	s3, s15
 800126a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800126e:	4816      	ldr	r0, [pc, #88]	; (80012c8 <MPU6050_Read_All+0x3c8>)
 8001270:	f000 f82c 	bl	80012cc <Kalman_getAngle>
 8001274:	eeb0 7a40 	vmov.f32	s14, s0
 8001278:	eef0 7a60 	vmov.f32	s15, s1
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8001282:	bf00      	nop
 8001284:	3740      	adds	r7, #64	; 0x40
 8001286:	46bd      	mov	sp, r7
 8001288:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800128c:	f3af 8000 	nop.w
 8001290:	00000000 	.word	0x00000000
 8001294:	40cc2900 	.word	0x40cc2900
 8001298:	00000000 	.word	0x00000000
 800129c:	40606000 	.word	0x40606000
 80012a0:	1a63c1f8 	.word	0x1a63c1f8
 80012a4:	404ca5dc 	.word	0x404ca5dc
 80012a8:	40d00000 	.word	0x40d00000
 80012ac:	43aa0000 	.word	0x43aa0000
 80012b0:	42121eb8 	.word	0x42121eb8
 80012b4:	200005a0 	.word	0x200005a0
 80012b8:	408f4000 	.word	0x408f4000
 80012bc:	c0568000 	.word	0xc0568000
 80012c0:	40568000 	.word	0x40568000
 80012c4:	20000048 	.word	0x20000048
 80012c8:	20000000 	.word	0x20000000

080012cc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80012cc:	b5b0      	push	{r4, r5, r7, lr}
 80012ce:	b096      	sub	sp, #88	; 0x58
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	61f8      	str	r0, [r7, #28]
 80012d4:	ed87 0b04 	vstr	d0, [r7, #16]
 80012d8:	ed87 1b02 	vstr	d1, [r7, #8]
 80012dc:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012ea:	f7fe ff71 	bl	80001d0 <__aeabi_dsub>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80012fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001300:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001304:	f7ff f91c 	bl	8000540 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4620      	mov	r0, r4
 800130e:	4629      	mov	r1, r5
 8001310:	f7fe ff60 	bl	80001d4 <__adddf3>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	69f9      	ldr	r1, [r7, #28]
 800131a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800132a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800132e:	f7ff f907 	bl	8000540 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001340:	f7fe ff46 	bl	80001d0 <__aeabi_dsub>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001352:	f7fe ff3d 	bl	80001d0 <__aeabi_dsub>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7fe ff36 	bl	80001d4 <__adddf3>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001374:	f7ff f8e4 	bl	8000540 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4620      	mov	r0, r4
 800137e:	4629      	mov	r1, r5
 8001380:	f7fe ff28 	bl	80001d4 <__adddf3>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	69f9      	ldr	r1, [r7, #28]
 800138a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800139a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800139e:	f7ff f8cf 	bl	8000540 <__aeabi_dmul>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4620      	mov	r0, r4
 80013a8:	4629      	mov	r1, r5
 80013aa:	f7fe ff11 	bl	80001d0 <__aeabi_dsub>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	69f9      	ldr	r1, [r7, #28]
 80013b4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80013c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013c8:	f7ff f8ba 	bl	8000540 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4620      	mov	r0, r4
 80013d2:	4629      	mov	r1, r5
 80013d4:	f7fe fefc 	bl	80001d0 <__aeabi_dsub>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	69f9      	ldr	r1, [r7, #28]
 80013de:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80013ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013f2:	f7ff f8a5 	bl	8000540 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4620      	mov	r0, r4
 80013fc:	4629      	mov	r1, r5
 80013fe:	f7fe fee9 	bl	80001d4 <__adddf3>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	69f9      	ldr	r1, [r7, #28]
 8001408:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001418:	f7fe fedc 	bl	80001d4 <__adddf3>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800142a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800142e:	f7ff f9b1 	bl	8000794 <__aeabi_ddiv>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001440:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001444:	f7ff f9a6 	bl	8000794 <__aeabi_ddiv>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001456:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800145a:	f7fe feb9 	bl	80001d0 <__aeabi_dsub>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800146c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001470:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001474:	f7ff f864 	bl	8000540 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4620      	mov	r0, r4
 800147e:	4629      	mov	r1, r5
 8001480:	f7fe fea8 	bl	80001d4 <__adddf3>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	69f9      	ldr	r1, [r7, #28]
 800148a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001494:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001498:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800149c:	f7ff f850 	bl	8000540 <__aeabi_dmul>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4620      	mov	r0, r4
 80014a6:	4629      	mov	r1, r5
 80014a8:	f7fe fe94 	bl	80001d4 <__adddf3>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	69f9      	ldr	r1, [r7, #28]
 80014b2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80014bc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80014c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80014d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80014d8:	f7ff f832 	bl	8000540 <__aeabi_dmul>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4620      	mov	r0, r4
 80014e2:	4629      	mov	r1, r5
 80014e4:	f7fe fe74 	bl	80001d0 <__aeabi_dsub>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	69f9      	ldr	r1, [r7, #28]
 80014ee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80014f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001500:	f7ff f81e 	bl	8000540 <__aeabi_dmul>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4620      	mov	r0, r4
 800150a:	4629      	mov	r1, r5
 800150c:	f7fe fe60 	bl	80001d0 <__aeabi_dsub>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	69f9      	ldr	r1, [r7, #28]
 8001516:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001520:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001524:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001528:	f7ff f80a 	bl	8000540 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4620      	mov	r0, r4
 8001532:	4629      	mov	r1, r5
 8001534:	f7fe fe4c 	bl	80001d0 <__aeabi_dsub>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	69f9      	ldr	r1, [r7, #28]
 800153e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001548:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800154c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001550:	f7fe fff6 	bl	8000540 <__aeabi_dmul>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4620      	mov	r0, r4
 800155a:	4629      	mov	r1, r5
 800155c:	f7fe fe38 	bl	80001d0 <__aeabi_dsub>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	69f9      	ldr	r1, [r7, #28]
 8001566:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001570:	ec43 2b17 	vmov	d7, r2, r3
};
 8001574:	eeb0 0a47 	vmov.f32	s0, s14
 8001578:	eef0 0a67 	vmov.f32	s1, s15
 800157c:	3758      	adds	r7, #88	; 0x58
 800157e:	46bd      	mov	sp, r7
 8001580:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <HAL_MspInit+0x44>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_MspInit+0x44>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6193      	str	r3, [r2, #24]
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_MspInit+0x44>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_MspInit+0x44>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <HAL_MspInit+0x44>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	61d3      	str	r3, [r2, #28]
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_MspInit+0x44>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015ba:	2007      	movs	r0, #7
 80015bc:	f000 fab6 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40021000 	.word	0x40021000

080015cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a17      	ldr	r2, [pc, #92]	; (8001648 <HAL_I2C_MspInit+0x7c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d127      	bne.n	800163e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <HAL_I2C_MspInit+0x80>)
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	4a16      	ldr	r2, [pc, #88]	; (800164c <HAL_I2C_MspInit+0x80>)
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f8:	6153      	str	r3, [r2, #20]
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_I2C_MspInit+0x80>)
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001606:	23c0      	movs	r3, #192	; 0xc0
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160a:	2312      	movs	r3, #18
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160e:	2301      	movs	r3, #1
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001616:	2304      	movs	r3, #4
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	480b      	ldr	r0, [pc, #44]	; (8001650 <HAL_I2C_MspInit+0x84>)
 8001622:	f000 fab7 	bl	8001b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_I2C_MspInit+0x80>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a08      	ldr	r2, [pc, #32]	; (800164c <HAL_I2C_MspInit+0x80>)
 800162c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_I2C_MspInit+0x80>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800163e:	bf00      	nop
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40005400 	.word	0x40005400
 800164c:	40021000 	.word	0x40021000
 8001650:	48000400 	.word	0x48000400

08001654 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <HAL_SPI_MspInit+0x7c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d128      	bne.n	80016c8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_SPI_MspInit+0x80>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	4a16      	ldr	r2, [pc, #88]	; (80016d4 <HAL_SPI_MspInit+0x80>)
 800167c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001680:	6193      	str	r3, [r2, #24]
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <HAL_SPI_MspInit+0x80>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_SPI_MspInit+0x80>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <HAL_SPI_MspInit+0x80>)
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	6153      	str	r3, [r2, #20]
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_SPI_MspInit+0x80>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80016a6:	23e0      	movs	r3, #224	; 0xe0
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016b6:	2305      	movs	r3, #5
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f000 fa66 	bl	8001b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	; 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40013000 	.word	0x40013000
 80016d4:	40021000 	.word	0x40021000

080016d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a17      	ldr	r2, [pc, #92]	; (8001754 <HAL_UART_MspInit+0x7c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d127      	bne.n	800174a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <HAL_UART_MspInit+0x80>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	4a16      	ldr	r2, [pc, #88]	; (8001758 <HAL_UART_MspInit+0x80>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001704:	6193      	str	r3, [r2, #24]
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <HAL_UART_MspInit+0x80>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_UART_MspInit+0x80>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <HAL_UART_MspInit+0x80>)
 8001718:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800171c:	6153      	str	r3, [r2, #20]
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_UART_MspInit+0x80>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800172a:	2330      	movs	r3, #48	; 0x30
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800173a:	2307      	movs	r3, #7
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	4805      	ldr	r0, [pc, #20]	; (800175c <HAL_UART_MspInit+0x84>)
 8001746:	f000 fa25 	bl	8001b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	; 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40013800 	.word	0x40013800
 8001758:	40021000 	.word	0x40021000
 800175c:	48000800 	.word	0x48000800

08001760 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a18      	ldr	r2, [pc, #96]	; (80017e0 <HAL_PCD_MspInit+0x80>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d129      	bne.n	80017d6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_PCD_MspInit+0x84>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <HAL_PCD_MspInit+0x84>)
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	6153      	str	r3, [r2, #20]
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_PCD_MspInit+0x84>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800179a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800179e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80017ac:	230e      	movs	r3, #14
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4619      	mov	r1, r3
 80017b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ba:	f000 f9eb 	bl	8001b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_PCD_MspInit+0x84>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <HAL_PCD_MspInit+0x84>)
 80017c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017c8:	61d3      	str	r3, [r2, #28]
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_PCD_MspInit+0x84>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	; 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40005c00 	.word	0x40005c00
 80017e4:	40021000 	.word	0x40021000

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <NMI_Handler+0x4>

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <MemManage_Handler+0x4>

080017fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <UsageFault_Handler+0x4>

08001806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001834:	f000 f884 	bl	8001940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <SystemInit+0x20>)
 8001842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <SystemInit+0x20>)
 8001848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800184c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001898 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001864:	f7ff ffea 	bl	800183c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001868:	480c      	ldr	r0, [pc, #48]	; (800189c <LoopForever+0x6>)
  ldr r1, =_edata
 800186a:	490d      	ldr	r1, [pc, #52]	; (80018a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <LoopForever+0xe>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001870:	e002      	b.n	8001878 <LoopCopyDataInit>

08001872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001876:	3304      	adds	r3, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800187c:	d3f9      	bcc.n	8001872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001880:	4c0a      	ldr	r4, [pc, #40]	; (80018ac <LoopForever+0x16>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001884:	e001      	b.n	800188a <LoopFillZerobss>

08001886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001888:	3204      	adds	r2, #4

0800188a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800188c:	d3fb      	bcc.n	8001886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800188e:	f003 fb45 	bl	8004f1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001892:	f7ff f905 	bl	8000aa0 <main>

08001896 <LoopForever>:

LoopForever:
    b LoopForever
 8001896:	e7fe      	b.n	8001896 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001898:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800189c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80018a4:	08005720 	.word	0x08005720
  ldr r2, =_sbss
 80018a8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80018ac:	200006e0 	.word	0x200006e0

080018b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <ADC1_2_IRQHandler>
	...

080018b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_Init+0x28>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_Init+0x28>)
 80018be:	f043 0310 	orr.w	r3, r3, #16
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 f931 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 f808 	bl	80018e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d0:	f7ff fe58 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40022000 	.word	0x40022000

080018e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_InitTick+0x54>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_InitTick+0x58>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f93b 	bl	8001b7a <HAL_SYSTICK_Config>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e00e      	b.n	800192c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b0f      	cmp	r3, #15
 8001912:	d80a      	bhi.n	800192a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001914:	2200      	movs	r2, #0
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f000 f911 	bl	8001b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001920:	4a06      	ldr	r2, [pc, #24]	; (800193c <HAL_InitTick+0x5c>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000090 	.word	0x20000090
 8001938:	20000098 	.word	0x20000098
 800193c:	20000094 	.word	0x20000094

08001940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x20>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x24>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <HAL_IncTick+0x24>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000098 	.word	0x20000098
 8001964:	200005a4 	.word	0x200005a4

08001968 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;  
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	200005a4 	.word	0x200005a4

08001980 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff ffee 	bl	8001968 <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d005      	beq.n	80019a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_Delay+0x44>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019a6:	bf00      	nop
 80019a8:	f7ff ffde 	bl	8001968 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f7      	bhi.n	80019a8 <HAL_Delay+0x28>
  {
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000098 	.word	0x20000098

080019c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <__NVIC_GetPriorityGrouping+0x18>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	f003 0307 	and.w	r3, r3, #7
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	; (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af8:	d301      	bcc.n	8001afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00f      	b.n	8001b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <SysTick_Config+0x40>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b06:	210f      	movs	r1, #15
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f7ff ff8e 	bl	8001a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SysTick_Config+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <SysTick_Config+0x40>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff47 	bl	80019c8 <__NVIC_SetPriorityGrouping>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b54:	f7ff ff5c 	bl	8001a10 <__NVIC_GetPriorityGrouping>
 8001b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff8e 	bl	8001a80 <NVIC_EncodePriority>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff5d 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffb0 	bl	8001ae8 <SysTick_Config>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba2:	e154      	b.n	8001e4e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2101      	movs	r1, #1
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8146 	beq.w	8001e48 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d005      	beq.n	8001bd4 <HAL_GPIO_Init+0x40>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d130      	bne.n	8001c36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	091b      	lsrs	r3, r3, #4
 8001c20:	f003 0201 	and.w	r2, r3, #1
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d017      	beq.n	8001c72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d123      	bne.n	8001cc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	08da      	lsrs	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3208      	adds	r2, #8
 8001c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	220f      	movs	r2, #15
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	08da      	lsrs	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3208      	adds	r2, #8
 8001cc0:	6939      	ldr	r1, [r7, #16]
 8001cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0203 	and.w	r2, r3, #3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 80a0 	beq.w	8001e48 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d08:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <HAL_GPIO_Init+0x2d8>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a57      	ldr	r2, [pc, #348]	; (8001e6c <HAL_GPIO_Init+0x2d8>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b55      	ldr	r3, [pc, #340]	; (8001e6c <HAL_GPIO_Init+0x2d8>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d20:	4a53      	ldr	r2, [pc, #332]	; (8001e70 <HAL_GPIO_Init+0x2dc>)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	3302      	adds	r3, #2
 8001d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d4a:	d019      	beq.n	8001d80 <HAL_GPIO_Init+0x1ec>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a49      	ldr	r2, [pc, #292]	; (8001e74 <HAL_GPIO_Init+0x2e0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d013      	beq.n	8001d7c <HAL_GPIO_Init+0x1e8>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a48      	ldr	r2, [pc, #288]	; (8001e78 <HAL_GPIO_Init+0x2e4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d00d      	beq.n	8001d78 <HAL_GPIO_Init+0x1e4>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a47      	ldr	r2, [pc, #284]	; (8001e7c <HAL_GPIO_Init+0x2e8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d007      	beq.n	8001d74 <HAL_GPIO_Init+0x1e0>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a46      	ldr	r2, [pc, #280]	; (8001e80 <HAL_GPIO_Init+0x2ec>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d101      	bne.n	8001d70 <HAL_GPIO_Init+0x1dc>
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	e008      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d70:	2305      	movs	r3, #5
 8001d72:	e006      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d74:	2303      	movs	r3, #3
 8001d76:	e004      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e002      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d80:	2300      	movs	r3, #0
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	f002 0203 	and.w	r2, r2, #3
 8001d88:	0092      	lsls	r2, r2, #2
 8001d8a:	4093      	lsls	r3, r2
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d92:	4937      	ldr	r1, [pc, #220]	; (8001e70 <HAL_GPIO_Init+0x2dc>)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001da0:	4b38      	ldr	r3, [pc, #224]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dc4:	4a2f      	ldr	r2, [pc, #188]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dca:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dee:	4a25      	ldr	r2, [pc, #148]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001df4:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e18:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f47f aea3 	bne.w	8001ba4 <HAL_GPIO_Init+0x10>
  }
}
 8001e5e:	bf00      	nop
 8001e60:	bf00      	nop
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40010000 	.word	0x40010000
 8001e74:	48000400 	.word	0x48000400
 8001e78:	48000800 	.word	0x48000800
 8001e7c:	48000c00 	.word	0x48000c00
 8001e80:	48001000 	.word	0x48001000
 8001e84:	40010400 	.word	0x40010400

08001e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
 8001e94:	4613      	mov	r3, r2
 8001e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e98:	787b      	ldrb	r3, [r7, #1]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e081      	b.n	8001fce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d106      	bne.n	8001ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff fb74 	bl	80015cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2224      	movs	r2, #36	; 0x24
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d107      	bne.n	8001f32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	e006      	b.n	8001f40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d104      	bne.n	8001f52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69d9      	ldr	r1, [r3, #28]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1a      	ldr	r2, [r3, #32]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0201 	orr.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	817b      	strh	r3, [r7, #10]
 8001fea:	460b      	mov	r3, r1
 8001fec:	813b      	strh	r3, [r7, #8]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	f040 80f9 	bne.w	80021f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_I2C_Mem_Write+0x34>
 8002006:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002008:	2b00      	cmp	r3, #0
 800200a:	d105      	bne.n	8002018 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002012:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0ed      	b.n	80021f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_I2C_Mem_Write+0x4e>
 8002022:	2302      	movs	r3, #2
 8002024:	e0e6      	b.n	80021f4 <HAL_I2C_Mem_Write+0x21c>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800202e:	f7ff fc9b 	bl	8001968 <HAL_GetTick>
 8002032:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2319      	movs	r3, #25
 800203a:	2201      	movs	r2, #1
 800203c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 fac3 	bl	80025cc <I2C_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0d1      	b.n	80021f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2221      	movs	r2, #33	; 0x21
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2240      	movs	r2, #64	; 0x40
 800205c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a3a      	ldr	r2, [r7, #32]
 800206a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002070:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002078:	88f8      	ldrh	r0, [r7, #6]
 800207a:	893a      	ldrh	r2, [r7, #8]
 800207c:	8979      	ldrh	r1, [r7, #10]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	4603      	mov	r3, r0
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f9d3 	bl	8002434 <I2C_RequestMemoryWrite>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0a9      	b.n	80021f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2bff      	cmp	r3, #255	; 0xff
 80020a8:	d90e      	bls.n	80020c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	22ff      	movs	r2, #255	; 0xff
 80020ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	8979      	ldrh	r1, [r7, #10]
 80020b8:	2300      	movs	r3, #0
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 fc3d 	bl	8002940 <I2C_TransferConfig>
 80020c6:	e00f      	b.n	80020e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	8979      	ldrh	r1, [r7, #10]
 80020da:	2300      	movs	r3, #0
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fc2c 	bl	8002940 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 fabc 	bl	800266a <I2C_WaitOnTXISFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e07b      	b.n	80021f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	781a      	ldrb	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002116:	b29b      	uxth	r3, r3
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002130:	b29b      	uxth	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d034      	beq.n	80021a0 <HAL_I2C_Mem_Write+0x1c8>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213a:	2b00      	cmp	r3, #0
 800213c:	d130      	bne.n	80021a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002144:	2200      	movs	r2, #0
 8002146:	2180      	movs	r1, #128	; 0x80
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 fa3f 	bl	80025cc <I2C_WaitOnFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e04d      	b.n	80021f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215c:	b29b      	uxth	r3, r3
 800215e:	2bff      	cmp	r3, #255	; 0xff
 8002160:	d90e      	bls.n	8002180 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	22ff      	movs	r2, #255	; 0xff
 8002166:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216c:	b2da      	uxtb	r2, r3
 800216e:	8979      	ldrh	r1, [r7, #10]
 8002170:	2300      	movs	r3, #0
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 fbe1 	bl	8002940 <I2C_TransferConfig>
 800217e:	e00f      	b.n	80021a0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218e:	b2da      	uxtb	r2, r3
 8002190:	8979      	ldrh	r1, [r7, #10]
 8002192:	2300      	movs	r3, #0
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 fbd0 	bl	8002940 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d19e      	bne.n	80020e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 faa2 	bl	80026f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e01a      	b.n	80021f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2220      	movs	r2, #32
 80021c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_I2C_Mem_Write+0x224>)
 80021d2:	400b      	ands	r3, r1
 80021d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e000      	b.n	80021f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80021f2:	2302      	movs	r3, #2
  }
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	fe00e800 	.word	0xfe00e800

08002200 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af02      	add	r7, sp, #8
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	4608      	mov	r0, r1
 800220a:	4611      	mov	r1, r2
 800220c:	461a      	mov	r2, r3
 800220e:	4603      	mov	r3, r0
 8002210:	817b      	strh	r3, [r7, #10]
 8002212:	460b      	mov	r3, r1
 8002214:	813b      	strh	r3, [r7, #8]
 8002216:	4613      	mov	r3, r2
 8002218:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b20      	cmp	r3, #32
 8002224:	f040 80fd 	bne.w	8002422 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_I2C_Mem_Read+0x34>
 800222e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800223a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0f1      	b.n	8002424 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_I2C_Mem_Read+0x4e>
 800224a:	2302      	movs	r3, #2
 800224c:	e0ea      	b.n	8002424 <HAL_I2C_Mem_Read+0x224>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002256:	f7ff fb87 	bl	8001968 <HAL_GetTick>
 800225a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	2319      	movs	r3, #25
 8002262:	2201      	movs	r2, #1
 8002264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f9af 	bl	80025cc <I2C_WaitOnFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0d5      	b.n	8002424 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2222      	movs	r2, #34	; 0x22
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2240      	movs	r2, #64	; 0x40
 8002284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a3a      	ldr	r2, [r7, #32]
 8002292:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002298:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022a0:	88f8      	ldrh	r0, [r7, #6]
 80022a2:	893a      	ldrh	r2, [r7, #8]
 80022a4:	8979      	ldrh	r1, [r7, #10]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	4603      	mov	r3, r0
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f913 	bl	80024dc <I2C_RequestMemoryRead>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0ad      	b.n	8002424 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2bff      	cmp	r3, #255	; 0xff
 80022d0:	d90e      	bls.n	80022f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	22ff      	movs	r2, #255	; 0xff
 80022d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	8979      	ldrh	r1, [r7, #10]
 80022e0:	4b52      	ldr	r3, [pc, #328]	; (800242c <HAL_I2C_Mem_Read+0x22c>)
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 fb29 	bl	8002940 <I2C_TransferConfig>
 80022ee:	e00f      	b.n	8002310 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	8979      	ldrh	r1, [r7, #10]
 8002302:	4b4a      	ldr	r3, [pc, #296]	; (800242c <HAL_I2C_Mem_Read+0x22c>)
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fb18 	bl	8002940 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	2200      	movs	r2, #0
 8002318:	2104      	movs	r1, #4
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f956 	bl	80025cc <I2C_WaitOnFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e07c      	b.n	8002424 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002352:	b29b      	uxth	r3, r3
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002360:	b29b      	uxth	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d034      	beq.n	80023d0 <HAL_I2C_Mem_Read+0x1d0>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236a:	2b00      	cmp	r3, #0
 800236c:	d130      	bne.n	80023d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002374:	2200      	movs	r2, #0
 8002376:	2180      	movs	r1, #128	; 0x80
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 f927 	bl	80025cc <I2C_WaitOnFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e04d      	b.n	8002424 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	2bff      	cmp	r3, #255	; 0xff
 8002390:	d90e      	bls.n	80023b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	22ff      	movs	r2, #255	; 0xff
 8002396:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	b2da      	uxtb	r2, r3
 800239e:	8979      	ldrh	r1, [r7, #10]
 80023a0:	2300      	movs	r3, #0
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 fac9 	bl	8002940 <I2C_TransferConfig>
 80023ae:	e00f      	b.n	80023d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	8979      	ldrh	r1, [r7, #10]
 80023c2:	2300      	movs	r3, #0
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fab8 	bl	8002940 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d19a      	bne.n	8002310 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f98a 	bl	80026f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e01a      	b.n	8002424 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2220      	movs	r2, #32
 80023f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6859      	ldr	r1, [r3, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_I2C_Mem_Read+0x230>)
 8002402:	400b      	ands	r3, r1
 8002404:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	e000      	b.n	8002424 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002422:	2302      	movs	r3, #2
  }
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	80002400 	.word	0x80002400
 8002430:	fe00e800 	.word	0xfe00e800

08002434 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	4608      	mov	r0, r1
 800243e:	4611      	mov	r1, r2
 8002440:	461a      	mov	r2, r3
 8002442:	4603      	mov	r3, r0
 8002444:	817b      	strh	r3, [r7, #10]
 8002446:	460b      	mov	r3, r1
 8002448:	813b      	strh	r3, [r7, #8]
 800244a:	4613      	mov	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	8979      	ldrh	r1, [r7, #10]
 8002454:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <I2C_RequestMemoryWrite+0xa4>)
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 fa6f 	bl	8002940 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	69b9      	ldr	r1, [r7, #24]
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f8ff 	bl	800266a <I2C_WaitOnTXISFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e02c      	b.n	80024d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d105      	bne.n	8002488 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800247c:	893b      	ldrh	r3, [r7, #8]
 800247e:	b2da      	uxtb	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	629a      	str	r2, [r3, #40]	; 0x28
 8002486:	e015      	b.n	80024b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002488:	893b      	ldrh	r3, [r7, #8]
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	b29b      	uxth	r3, r3
 800248e:	b2da      	uxtb	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	69b9      	ldr	r1, [r7, #24]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 f8e5 	bl	800266a <I2C_WaitOnTXISFlagUntilTimeout>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e012      	b.n	80024d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024aa:	893b      	ldrh	r3, [r7, #8]
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	2200      	movs	r2, #0
 80024bc:	2180      	movs	r1, #128	; 0x80
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f884 	bl	80025cc <I2C_WaitOnFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	80002000 	.word	0x80002000

080024dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	4608      	mov	r0, r1
 80024e6:	4611      	mov	r1, r2
 80024e8:	461a      	mov	r2, r3
 80024ea:	4603      	mov	r3, r0
 80024ec:	817b      	strh	r3, [r7, #10]
 80024ee:	460b      	mov	r3, r1
 80024f0:	813b      	strh	r3, [r7, #8]
 80024f2:	4613      	mov	r3, r2
 80024f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	8979      	ldrh	r1, [r7, #10]
 80024fc:	4b20      	ldr	r3, [pc, #128]	; (8002580 <I2C_RequestMemoryRead+0xa4>)
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2300      	movs	r3, #0
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fa1c 	bl	8002940 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	69b9      	ldr	r1, [r7, #24]
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f8ac 	bl	800266a <I2C_WaitOnTXISFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e02c      	b.n	8002576 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d105      	bne.n	800252e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002522:	893b      	ldrh	r3, [r7, #8]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	629a      	str	r2, [r3, #40]	; 0x28
 800252c:	e015      	b.n	800255a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800252e:	893b      	ldrh	r3, [r7, #8]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	b29b      	uxth	r3, r3
 8002534:	b2da      	uxtb	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	69b9      	ldr	r1, [r7, #24]
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f892 	bl	800266a <I2C_WaitOnTXISFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e012      	b.n	8002576 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002550:	893b      	ldrh	r3, [r7, #8]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	2200      	movs	r2, #0
 8002562:	2140      	movs	r1, #64	; 0x40
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f831 	bl	80025cc <I2C_WaitOnFlagUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	80002000 	.word	0x80002000

08002584 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b02      	cmp	r3, #2
 8002598:	d103      	bne.n	80025a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2200      	movs	r2, #0
 80025a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d007      	beq.n	80025c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699a      	ldr	r2, [r3, #24]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	619a      	str	r2, [r3, #24]
  }
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	4613      	mov	r3, r2
 80025da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025dc:	e031      	b.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d02d      	beq.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e6:	f7ff f9bf 	bl	8001968 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d302      	bcc.n	80025fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d122      	bne.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4013      	ands	r3, r2
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	429a      	cmp	r2, r3
 800260a:	bf0c      	ite	eq
 800260c:	2301      	moveq	r3, #1
 800260e:	2300      	movne	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	429a      	cmp	r2, r3
 8002618:	d113      	bne.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f043 0220 	orr.w	r2, r3, #32
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2220      	movs	r2, #32
 800262a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e00f      	b.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	699a      	ldr	r2, [r3, #24]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4013      	ands	r3, r2
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	429a      	cmp	r2, r3
 8002650:	bf0c      	ite	eq
 8002652:	2301      	moveq	r3, #1
 8002654:	2300      	movne	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	429a      	cmp	r2, r3
 800265e:	d0be      	beq.n	80025de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002676:	e033      	b.n	80026e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f87f 	bl	8002780 <I2C_IsErrorOccurred>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e031      	b.n	80026f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002692:	d025      	beq.n	80026e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002694:	f7ff f968 	bl	8001968 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d302      	bcc.n	80026aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d11a      	bne.n	80026e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d013      	beq.n	80026e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	f043 0220 	orr.w	r2, r3, #32
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e007      	b.n	80026f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d1c4      	bne.n	8002678 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002704:	e02f      	b.n	8002766 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f838 	bl	8002780 <I2C_IsErrorOccurred>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e02d      	b.n	8002776 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271a:	f7ff f925 	bl	8001968 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	429a      	cmp	r2, r3
 8002728:	d302      	bcc.n	8002730 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d11a      	bne.n	8002766 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	2b20      	cmp	r3, #32
 800273c:	d013      	beq.n	8002766 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f043 0220 	orr.w	r2, r3, #32
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e007      	b.n	8002776 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b20      	cmp	r3, #32
 8002772:	d1c8      	bne.n	8002706 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d068      	beq.n	800287e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2210      	movs	r2, #16
 80027b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027b4:	e049      	b.n	800284a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d045      	beq.n	800284a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027be:	f7ff f8d3 	bl	8001968 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d302      	bcc.n	80027d4 <I2C_IsErrorOccurred+0x54>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d13a      	bne.n	800284a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027f6:	d121      	bne.n	800283c <I2C_IsErrorOccurred+0xbc>
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027fe:	d01d      	beq.n	800283c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	2b20      	cmp	r3, #32
 8002804:	d01a      	beq.n	800283c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002814:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002816:	f7ff f8a7 	bl	8001968 <HAL_GetTick>
 800281a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800281c:	e00e      	b.n	800283c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800281e:	f7ff f8a3 	bl	8001968 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b19      	cmp	r3, #25
 800282a:	d907      	bls.n	800283c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	f043 0320 	orr.w	r3, r3, #32
 8002832:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800283a:	e006      	b.n	800284a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b20      	cmp	r3, #32
 8002848:	d1e9      	bne.n	800281e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b20      	cmp	r3, #32
 8002856:	d003      	beq.n	8002860 <I2C_IsErrorOccurred+0xe0>
 8002858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0aa      	beq.n	80027b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002864:	2b00      	cmp	r3, #0
 8002866:	d103      	bne.n	8002870 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2220      	movs	r2, #32
 800286e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	f043 0304 	orr.w	r3, r3, #4
 8002876:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00b      	beq.n	80028a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00b      	beq.n	80028ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	f043 0308 	orr.w	r3, r3, #8
 80028b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	f043 0302 	orr.w	r3, r3, #2
 80028da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80028ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01c      	beq.n	800292e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f7ff fe45 	bl	8002584 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <I2C_IsErrorOccurred+0x1bc>)
 8002906:	400b      	ands	r3, r1
 8002908:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	431a      	orrs	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800292e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002932:	4618      	mov	r0, r3
 8002934:	3728      	adds	r7, #40	; 0x28
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	fe00e800 	.word	0xfe00e800

08002940 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	460b      	mov	r3, r1
 800294c:	817b      	strh	r3, [r7, #10]
 800294e:	4613      	mov	r3, r2
 8002950:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002952:	897b      	ldrh	r3, [r7, #10]
 8002954:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002958:	7a7b      	ldrb	r3, [r7, #9]
 800295a:	041b      	lsls	r3, r3, #16
 800295c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002960:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	4313      	orrs	r3, r2
 800296a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800296e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	0d5b      	lsrs	r3, r3, #21
 800297a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <I2C_TransferConfig+0x60>)
 8002980:	430b      	orrs	r3, r1
 8002982:	43db      	mvns	r3, r3
 8002984:	ea02 0103 	and.w	r1, r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	430a      	orrs	r2, r1
 8002990:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002992:	bf00      	nop
 8002994:	371c      	adds	r7, #28
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	03ff63ff 	.word	0x03ff63ff

080029a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d138      	bne.n	8002a2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e032      	b.n	8002a2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2224      	movs	r2, #36	; 0x24
 80029d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6819      	ldr	r1, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	e000      	b.n	8002a2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a2c:	2302      	movs	r3, #2
  }
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b085      	sub	sp, #20
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	d139      	bne.n	8002ac4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e033      	b.n	8002ac6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2224      	movs	r2, #36	; 0x24
 8002a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e000      	b.n	8002ac6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
  }
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ad4:	b08b      	sub	sp, #44	; 0x2c
 8002ad6:	af06      	add	r7, sp, #24
 8002ad8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0c4      	b.n	8002c6e <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d106      	bne.n	8002afe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7fe fe31 	bl	8001760 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2203      	movs	r2, #3
 8002b02:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f002 f9bb 	bl	8004e86 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	e040      	b.n	8002b98 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	440b      	add	r3, r1
 8002b26:	3301      	adds	r3, #1
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	440b      	add	r3, r1
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	440b      	add	r3, r1
 8002b50:	3303      	adds	r3, #3
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	440b      	add	r3, r1
 8002b64:	3338      	adds	r3, #56	; 0x38
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	333c      	adds	r3, #60	; 0x3c
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3340      	adds	r3, #64	; 0x40
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	3301      	adds	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d3b9      	bcc.n	8002b16 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
 8002ba6:	e044      	b.n	8002c32 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bbe:	7bfa      	ldrb	r2, [r7, #15]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	440b      	add	r3, r1
 8002bcc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	440b      	add	r3, r1
 8002be2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d3b5      	bcc.n	8002ba8 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	687e      	ldr	r6, [r7, #4]
 8002c44:	466d      	mov	r5, sp
 8002c46:	f106 0410 	add.w	r4, r6, #16
 8002c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	602b      	str	r3, [r5, #0]
 8002c52:	1d33      	adds	r3, r6, #4
 8002c54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c56:	6838      	ldr	r0, [r7, #0]
 8002c58:	f002 f930 	bl	8004ebc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c88:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	f001 b823 	b.w	8003ce4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 817d 	beq.w	8002fae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cb4:	4bbc      	ldr	r3, [pc, #752]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 030c 	and.w	r3, r3, #12
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d00c      	beq.n	8002cda <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cc0:	4bb9      	ldr	r3, [pc, #740]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d15c      	bne.n	8002d86 <HAL_RCC_OscConfig+0x10e>
 8002ccc:	4bb6      	ldr	r3, [pc, #728]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd8:	d155      	bne.n	8002d86 <HAL_RCC_OscConfig+0x10e>
 8002cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cde:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d102      	bne.n	8002d0c <HAL_RCC_OscConfig+0x94>
 8002d06:	4ba8      	ldr	r3, [pc, #672]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	e015      	b.n	8002d38 <HAL_RCC_OscConfig+0xc0>
 8002d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d10:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d24:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002d28:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002d34:	4b9c      	ldr	r3, [pc, #624]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d3c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002d40:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002d44:	fa92 f2a2 	rbit	r2, r2
 8002d48:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002d4c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002d50:	fab2 f282 	clz	r2, r2
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	f042 0220 	orr.w	r2, r2, #32
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	f002 021f 	and.w	r2, r2, #31
 8002d60:	2101      	movs	r1, #1
 8002d62:	fa01 f202 	lsl.w	r2, r1, r2
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 811f 	beq.w	8002fac <HAL_RCC_OscConfig+0x334>
 8002d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f040 8116 	bne.w	8002fac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	f000 bfaf 	b.w	8003ce4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d96:	d106      	bne.n	8002da6 <HAL_RCC_OscConfig+0x12e>
 8002d98:	4b83      	ldr	r3, [pc, #524]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a82      	ldr	r2, [pc, #520]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	e036      	b.n	8002e14 <HAL_RCC_OscConfig+0x19c>
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x158>
 8002db6:	4b7c      	ldr	r3, [pc, #496]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a7b      	ldr	r2, [pc, #492]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	4b79      	ldr	r3, [pc, #484]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a78      	ldr	r2, [pc, #480]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e021      	b.n	8002e14 <HAL_RCC_OscConfig+0x19c>
 8002dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x184>
 8002de2:	4b71      	ldr	r3, [pc, #452]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a70      	ldr	r2, [pc, #448]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	4b6e      	ldr	r3, [pc, #440]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a6d      	ldr	r2, [pc, #436]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e00b      	b.n	8002e14 <HAL_RCC_OscConfig+0x19c>
 8002dfc:	4b6a      	ldr	r3, [pc, #424]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a69      	ldr	r2, [pc, #420]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b67      	ldr	r3, [pc, #412]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a66      	ldr	r2, [pc, #408]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e12:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e14:	4b64      	ldr	r3, [pc, #400]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	f023 020f 	bic.w	r2, r3, #15
 8002e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	495f      	ldr	r1, [pc, #380]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d059      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7fe fd93 	bl	8001968 <HAL_GetTick>
 8002e42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e48:	f7fe fd8e 	bl	8001968 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b64      	cmp	r3, #100	; 0x64
 8002e56:	d902      	bls.n	8002e5e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	f000 bf43 	b.w	8003ce4 <HAL_RCC_OscConfig+0x106c>
 8002e5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e62:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002e72:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d102      	bne.n	8002e90 <HAL_RCC_OscConfig+0x218>
 8002e8a:	4b47      	ldr	r3, [pc, #284]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	e015      	b.n	8002ebc <HAL_RCC_OscConfig+0x244>
 8002e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e94:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ea8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002eac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002eb8:	4b3b      	ldr	r3, [pc, #236]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ec0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002ec4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ec8:	fa92 f2a2 	rbit	r2, r2
 8002ecc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002ed0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ed4:	fab2 f282 	clz	r2, r2
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	f042 0220 	orr.w	r2, r2, #32
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	f002 021f 	and.w	r2, r2, #31
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ab      	beq.n	8002e48 <HAL_RCC_OscConfig+0x1d0>
 8002ef0:	e05d      	b.n	8002fae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef2:	f7fe fd39 	bl	8001968 <HAL_GetTick>
 8002ef6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002efc:	f7fe fd34 	bl	8001968 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b64      	cmp	r3, #100	; 0x64
 8002f0a:	d902      	bls.n	8002f12 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	f000 bee9 	b.w	8003ce4 <HAL_RCC_OscConfig+0x106c>
 8002f12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f16:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002f26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d102      	bne.n	8002f44 <HAL_RCC_OscConfig+0x2cc>
 8002f3e:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	e015      	b.n	8002f70 <HAL_RCC_OscConfig+0x2f8>
 8002f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f48:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f5c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002f60:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f74:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002f78:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f7c:	fa92 f2a2 	rbit	r2, r2
 8002f80:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002f84:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002f88:	fab2 f282 	clz	r2, r2
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	f042 0220 	orr.w	r2, r2, #32
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	f002 021f 	and.w	r2, r2, #31
 8002f98:	2101      	movs	r1, #1
 8002f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1ab      	bne.n	8002efc <HAL_RCC_OscConfig+0x284>
 8002fa4:	e003      	b.n	8002fae <HAL_RCC_OscConfig+0x336>
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 817d 	beq.w	80032be <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fc4:	4ba6      	ldr	r3, [pc, #664]	; (8003260 <HAL_RCC_OscConfig+0x5e8>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00b      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fd0:	4ba3      	ldr	r3, [pc, #652]	; (8003260 <HAL_RCC_OscConfig+0x5e8>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d172      	bne.n	80030c2 <HAL_RCC_OscConfig+0x44a>
 8002fdc:	4ba0      	ldr	r3, [pc, #640]	; (8003260 <HAL_RCC_OscConfig+0x5e8>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d16c      	bne.n	80030c2 <HAL_RCC_OscConfig+0x44a>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002ffa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d102      	bne.n	8003018 <HAL_RCC_OscConfig+0x3a0>
 8003012:	4b93      	ldr	r3, [pc, #588]	; (8003260 <HAL_RCC_OscConfig+0x5e8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	e013      	b.n	8003040 <HAL_RCC_OscConfig+0x3c8>
 8003018:	2302      	movs	r3, #2
 800301a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800302a:	2302      	movs	r3, #2
 800302c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003030:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003034:	fa93 f3a3 	rbit	r3, r3
 8003038:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800303c:	4b88      	ldr	r3, [pc, #544]	; (8003260 <HAL_RCC_OscConfig+0x5e8>)
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	2202      	movs	r2, #2
 8003042:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003046:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800304a:	fa92 f2a2 	rbit	r2, r2
 800304e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003052:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003056:	fab2 f282 	clz	r2, r2
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	f042 0220 	orr.w	r2, r2, #32
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	f002 021f 	and.w	r2, r2, #31
 8003066:	2101      	movs	r1, #1
 8003068:	fa01 f202 	lsl.w	r2, r1, r2
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCC_OscConfig+0x410>
 8003072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d002      	beq.n	8003088 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	f000 be2e 	b.w	8003ce4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003088:	4b75      	ldr	r3, [pc, #468]	; (8003260 <HAL_RCC_OscConfig+0x5e8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003094:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	21f8      	movs	r1, #248	; 0xf8
 800309e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80030a6:	fa91 f1a1 	rbit	r1, r1
 80030aa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80030ae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80030b2:	fab1 f181 	clz	r1, r1
 80030b6:	b2c9      	uxtb	r1, r1
 80030b8:	408b      	lsls	r3, r1
 80030ba:	4969      	ldr	r1, [pc, #420]	; (8003260 <HAL_RCC_OscConfig+0x5e8>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c0:	e0fd      	b.n	80032be <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8088 	beq.w	80031e4 <HAL_RCC_OscConfig+0x56c>
 80030d4:	2301      	movs	r3, #1
 80030d6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80030e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	461a      	mov	r2, r3
 80030fc:	2301      	movs	r3, #1
 80030fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe fc32 	bl	8001968 <HAL_GetTick>
 8003104:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	e00a      	b.n	8003120 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310a:	f7fe fc2d 	bl	8001968 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d902      	bls.n	8003120 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	f000 bde2 	b.w	8003ce4 <HAL_RCC_OscConfig+0x106c>
 8003120:	2302      	movs	r3, #2
 8003122:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003132:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003136:	fab3 f383 	clz	r3, r3
 800313a:	b2db      	uxtb	r3, r3
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b01      	cmp	r3, #1
 8003148:	d102      	bne.n	8003150 <HAL_RCC_OscConfig+0x4d8>
 800314a:	4b45      	ldr	r3, [pc, #276]	; (8003260 <HAL_RCC_OscConfig+0x5e8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	e013      	b.n	8003178 <HAL_RCC_OscConfig+0x500>
 8003150:	2302      	movs	r3, #2
 8003152:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003162:	2302      	movs	r3, #2
 8003164:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003168:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800316c:	fa93 f3a3 	rbit	r3, r3
 8003170:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003174:	4b3a      	ldr	r3, [pc, #232]	; (8003260 <HAL_RCC_OscConfig+0x5e8>)
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	2202      	movs	r2, #2
 800317a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800317e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003182:	fa92 f2a2 	rbit	r2, r2
 8003186:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800318a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800318e:	fab2 f282 	clz	r2, r2
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	f042 0220 	orr.w	r2, r2, #32
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	f002 021f 	and.w	r2, r2, #31
 800319e:	2101      	movs	r1, #1
 80031a0:	fa01 f202 	lsl.w	r2, r1, r2
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0af      	beq.n	800310a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031aa:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <HAL_RCC_OscConfig+0x5e8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	21f8      	movs	r1, #248	; 0xf8
 80031c0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80031c8:	fa91 f1a1 	rbit	r1, r1
 80031cc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80031d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80031d4:	fab1 f181 	clz	r1, r1
 80031d8:	b2c9      	uxtb	r1, r1
 80031da:	408b      	lsls	r3, r1
 80031dc:	4920      	ldr	r1, [pc, #128]	; (8003260 <HAL_RCC_OscConfig+0x5e8>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]
 80031e2:	e06c      	b.n	80032be <HAL_RCC_OscConfig+0x646>
 80031e4:	2301      	movs	r3, #1
 80031e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80031ee:	fa93 f3a3 	rbit	r3, r3
 80031f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80031f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003204:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	461a      	mov	r2, r3
 800320c:	2300      	movs	r3, #0
 800320e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe fbaa 	bl	8001968 <HAL_GetTick>
 8003214:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321a:	f7fe fba5 	bl	8001968 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d902      	bls.n	8003230 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	f000 bd5a 	b.w	8003ce4 <HAL_RCC_OscConfig+0x106c>
 8003230:	2302      	movs	r3, #2
 8003232:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003236:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003246:	fab3 f383 	clz	r3, r3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b01      	cmp	r3, #1
 8003258:	d104      	bne.n	8003264 <HAL_RCC_OscConfig+0x5ec>
 800325a:	4b01      	ldr	r3, [pc, #4]	; (8003260 <HAL_RCC_OscConfig+0x5e8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	e015      	b.n	800328c <HAL_RCC_OscConfig+0x614>
 8003260:	40021000 	.word	0x40021000
 8003264:	2302      	movs	r3, #2
 8003266:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003276:	2302      	movs	r3, #2
 8003278:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800327c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003288:	4bc8      	ldr	r3, [pc, #800]	; (80035ac <HAL_RCC_OscConfig+0x934>)
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	2202      	movs	r2, #2
 800328e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003292:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003296:	fa92 f2a2 	rbit	r2, r2
 800329a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800329e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80032a2:	fab2 f282 	clz	r2, r2
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	f042 0220 	orr.w	r2, r2, #32
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	f002 021f 	and.w	r2, r2, #31
 80032b2:	2101      	movs	r1, #1
 80032b4:	fa01 f202 	lsl.w	r2, r1, r2
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1ad      	bne.n	800321a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8110 	beq.w	80034f4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d079      	beq.n	80033d8 <HAL_RCC_OscConfig+0x760>
 80032e4:	2301      	movs	r3, #1
 80032e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80032f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	4bab      	ldr	r3, [pc, #684]	; (80035b0 <HAL_RCC_OscConfig+0x938>)
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	461a      	mov	r2, r3
 800330a:	2301      	movs	r3, #1
 800330c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330e:	f7fe fb2b 	bl	8001968 <HAL_GetTick>
 8003312:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003316:	e00a      	b.n	800332e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003318:	f7fe fb26 	bl	8001968 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d902      	bls.n	800332e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	f000 bcdb 	b.w	8003ce4 <HAL_RCC_OscConfig+0x106c>
 800332e:	2302      	movs	r3, #2
 8003330:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003338:	fa93 f3a3 	rbit	r3, r3
 800333c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003344:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003348:	2202      	movs	r2, #2
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	fa93 f2a3 	rbit	r2, r3
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800336c:	2202      	movs	r2, #2
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	fa93 f2a3 	rbit	r2, r3
 800337e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003382:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003386:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003388:	4b88      	ldr	r3, [pc, #544]	; (80035ac <HAL_RCC_OscConfig+0x934>)
 800338a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800338c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003390:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003394:	2102      	movs	r1, #2
 8003396:	6019      	str	r1, [r3, #0]
 8003398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	fa93 f1a3 	rbit	r1, r3
 80033a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80033ae:	6019      	str	r1, [r3, #0]
  return result;
 80033b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	fab3 f383 	clz	r3, r3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f003 031f 	and.w	r3, r3, #31
 80033ca:	2101      	movs	r1, #1
 80033cc:	fa01 f303 	lsl.w	r3, r1, r3
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0a0      	beq.n	8003318 <HAL_RCC_OscConfig+0x6a0>
 80033d6:	e08d      	b.n	80034f4 <HAL_RCC_OscConfig+0x87c>
 80033d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80033e0:	2201      	movs	r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	fa93 f2a3 	rbit	r2, r3
 80033f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80033fa:	601a      	str	r2, [r3, #0]
  return result;
 80033fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003400:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003404:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	4b68      	ldr	r3, [pc, #416]	; (80035b0 <HAL_RCC_OscConfig+0x938>)
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	461a      	mov	r2, r3
 8003416:	2300      	movs	r3, #0
 8003418:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341a:	f7fe faa5 	bl	8001968 <HAL_GetTick>
 800341e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003422:	e00a      	b.n	800343a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003424:	f7fe faa0 	bl	8001968 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d902      	bls.n	800343a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	f000 bc55 	b.w	8003ce4 <HAL_RCC_OscConfig+0x106c>
 800343a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003442:	2202      	movs	r2, #2
 8003444:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	fa93 f2a3 	rbit	r2, r3
 8003454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003458:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003462:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003466:	2202      	movs	r2, #2
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	fa93 f2a3 	rbit	r2, r3
 8003478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003486:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800348a:	2202      	movs	r2, #2
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	fa93 f2a3 	rbit	r2, r3
 800349c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80034a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a6:	4b41      	ldr	r3, [pc, #260]	; (80035ac <HAL_RCC_OscConfig+0x934>)
 80034a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80034b2:	2102      	movs	r1, #2
 80034b4:	6019      	str	r1, [r3, #0]
 80034b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	fa93 f1a3 	rbit	r1, r3
 80034c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80034cc:	6019      	str	r1, [r3, #0]
  return result;
 80034ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	fab3 f383 	clz	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	2101      	movs	r1, #1
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d197      	bne.n	8003424 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 81a1 	beq.w	800384c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350a:	2300      	movs	r3, #0
 800350c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003510:	4b26      	ldr	r3, [pc, #152]	; (80035ac <HAL_RCC_OscConfig+0x934>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d116      	bne.n	800354a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351c:	4b23      	ldr	r3, [pc, #140]	; (80035ac <HAL_RCC_OscConfig+0x934>)
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	4a22      	ldr	r2, [pc, #136]	; (80035ac <HAL_RCC_OscConfig+0x934>)
 8003522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003526:	61d3      	str	r3, [r2, #28]
 8003528:	4b20      	ldr	r3, [pc, #128]	; (80035ac <HAL_RCC_OscConfig+0x934>)
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003534:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003542:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003544:	2301      	movs	r3, #1
 8003546:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354a:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <HAL_RCC_OscConfig+0x93c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d11a      	bne.n	800358c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003556:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <HAL_RCC_OscConfig+0x93c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a16      	ldr	r2, [pc, #88]	; (80035b4 <HAL_RCC_OscConfig+0x93c>)
 800355c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003560:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003562:	f7fe fa01 	bl	8001968 <HAL_GetTick>
 8003566:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356a:	e009      	b.n	8003580 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356c:	f7fe f9fc 	bl	8001968 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b64      	cmp	r3, #100	; 0x64
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e3b1      	b.n	8003ce4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <HAL_RCC_OscConfig+0x93c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0ef      	beq.n	800356c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800358c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003590:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d10d      	bne.n	80035b8 <HAL_RCC_OscConfig+0x940>
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <HAL_RCC_OscConfig+0x934>)
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	4a02      	ldr	r2, [pc, #8]	; (80035ac <HAL_RCC_OscConfig+0x934>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6213      	str	r3, [r2, #32]
 80035a8:	e03c      	b.n	8003624 <HAL_RCC_OscConfig+0x9ac>
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000
 80035b0:	10908120 	.word	0x10908120
 80035b4:	40007000 	.word	0x40007000
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10c      	bne.n	80035e2 <HAL_RCC_OscConfig+0x96a>
 80035c8:	4bc1      	ldr	r3, [pc, #772]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	4ac0      	ldr	r2, [pc, #768]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 80035ce:	f023 0301 	bic.w	r3, r3, #1
 80035d2:	6213      	str	r3, [r2, #32]
 80035d4:	4bbe      	ldr	r3, [pc, #760]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	4abd      	ldr	r2, [pc, #756]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 80035da:	f023 0304 	bic.w	r3, r3, #4
 80035de:	6213      	str	r3, [r2, #32]
 80035e0:	e020      	b.n	8003624 <HAL_RCC_OscConfig+0x9ac>
 80035e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b05      	cmp	r3, #5
 80035f0:	d10c      	bne.n	800360c <HAL_RCC_OscConfig+0x994>
 80035f2:	4bb7      	ldr	r3, [pc, #732]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4ab6      	ldr	r2, [pc, #728]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 80035f8:	f043 0304 	orr.w	r3, r3, #4
 80035fc:	6213      	str	r3, [r2, #32]
 80035fe:	4bb4      	ldr	r3, [pc, #720]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	4ab3      	ldr	r2, [pc, #716]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6213      	str	r3, [r2, #32]
 800360a:	e00b      	b.n	8003624 <HAL_RCC_OscConfig+0x9ac>
 800360c:	4bb0      	ldr	r3, [pc, #704]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	4aaf      	ldr	r2, [pc, #700]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	6213      	str	r3, [r2, #32]
 8003618:	4bad      	ldr	r3, [pc, #692]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	4aac      	ldr	r2, [pc, #688]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 800361e:	f023 0304 	bic.w	r3, r3, #4
 8003622:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003628:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8081 	beq.w	8003738 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003636:	f7fe f997 	bl	8001968 <HAL_GetTick>
 800363a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363e:	e00b      	b.n	8003658 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003640:	f7fe f992 	bl	8001968 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003650:	4293      	cmp	r3, r2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e345      	b.n	8003ce4 <HAL_RCC_OscConfig+0x106c>
 8003658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003660:	2202      	movs	r2, #2
 8003662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003668:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	fa93 f2a3 	rbit	r2, r3
 8003672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003676:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003680:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003684:	2202      	movs	r2, #2
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	fa93 f2a3 	rbit	r2, r3
 8003696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800369e:	601a      	str	r2, [r3, #0]
  return result;
 80036a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80036a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f043 0302 	orr.w	r3, r3, #2
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d102      	bne.n	80036c4 <HAL_RCC_OscConfig+0xa4c>
 80036be:	4b84      	ldr	r3, [pc, #528]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	e013      	b.n	80036ec <HAL_RCC_OscConfig+0xa74>
 80036c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80036cc:	2202      	movs	r2, #2
 80036ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	fa93 f2a3 	rbit	r2, r3
 80036de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	4b79      	ldr	r3, [pc, #484]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80036f4:	2102      	movs	r1, #2
 80036f6:	6011      	str	r1, [r2, #0]
 80036f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	fa92 f1a2 	rbit	r1, r2
 8003706:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800370a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800370e:	6011      	str	r1, [r2, #0]
  return result;
 8003710:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003714:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	fab2 f282 	clz	r2, r2
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	f002 021f 	and.w	r2, r2, #31
 800372a:	2101      	movs	r1, #1
 800372c:	fa01 f202 	lsl.w	r2, r1, r2
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d084      	beq.n	8003640 <HAL_RCC_OscConfig+0x9c8>
 8003736:	e07f      	b.n	8003838 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003738:	f7fe f916 	bl	8001968 <HAL_GetTick>
 800373c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003740:	e00b      	b.n	800375a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003742:	f7fe f911 	bl	8001968 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e2c4      	b.n	8003ce4 <HAL_RCC_OscConfig+0x106c>
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003762:	2202      	movs	r2, #2
 8003764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	fa93 f2a3 	rbit	r2, r3
 8003774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003778:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003782:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003786:	2202      	movs	r2, #2
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	fa93 f2a3 	rbit	r2, r3
 8003798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80037a0:	601a      	str	r2, [r3, #0]
  return result;
 80037a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80037aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ac:	fab3 f383 	clz	r3, r3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	f043 0302 	orr.w	r3, r3, #2
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d102      	bne.n	80037c6 <HAL_RCC_OscConfig+0xb4e>
 80037c0:	4b43      	ldr	r3, [pc, #268]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	e013      	b.n	80037ee <HAL_RCC_OscConfig+0xb76>
 80037c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80037ce:	2202      	movs	r2, #2
 80037d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	fa93 f2a3 	rbit	r2, r3
 80037e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	4b39      	ldr	r3, [pc, #228]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80037f6:	2102      	movs	r1, #2
 80037f8:	6011      	str	r1, [r2, #0]
 80037fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	fa92 f1a2 	rbit	r1, r2
 8003808:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800380c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003810:	6011      	str	r1, [r2, #0]
  return result;
 8003812:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003816:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	fab2 f282 	clz	r2, r2
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	f002 021f 	and.w	r2, r2, #31
 800382c:	2101      	movs	r1, #1
 800382e:	fa01 f202 	lsl.w	r2, r1, r2
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d184      	bne.n	8003742 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003838:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800383c:	2b01      	cmp	r3, #1
 800383e:	d105      	bne.n	800384c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003840:	4b23      	ldr	r3, [pc, #140]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	4a22      	ldr	r2, [pc, #136]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 8003846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800384a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800384c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003850:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 8242 	beq.w	8003ce2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800385e:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <HAL_RCC_OscConfig+0xc58>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b08      	cmp	r3, #8
 8003868:	f000 8213 	beq.w	8003c92 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800386c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003870:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	2b02      	cmp	r3, #2
 800387a:	f040 8162 	bne.w	8003b42 <HAL_RCC_OscConfig+0xeca>
 800387e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003882:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003886:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800388a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003890:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	fa93 f2a3 	rbit	r2, r3
 800389a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80038a2:	601a      	str	r2, [r3, #0]
  return result;
 80038a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80038ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	461a      	mov	r2, r3
 80038c0:	2300      	movs	r3, #0
 80038c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fe f850 	bl	8001968 <HAL_GetTick>
 80038c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038cc:	e00c      	b.n	80038e8 <HAL_RCC_OscConfig+0xc70>
 80038ce:	bf00      	nop
 80038d0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d4:	f7fe f848 	bl	8001968 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e1fd      	b.n	8003ce4 <HAL_RCC_OscConfig+0x106c>
 80038e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80038f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	fa93 f2a3 	rbit	r2, r3
 8003904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003908:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800390c:	601a      	str	r2, [r3, #0]
  return result;
 800390e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003912:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003916:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003918:	fab3 f383 	clz	r3, r3
 800391c:	b2db      	uxtb	r3, r3
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d102      	bne.n	8003932 <HAL_RCC_OscConfig+0xcba>
 800392c:	4bb0      	ldr	r3, [pc, #704]	; (8003bf0 <HAL_RCC_OscConfig+0xf78>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	e027      	b.n	8003982 <HAL_RCC_OscConfig+0xd0a>
 8003932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003936:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800393a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800393e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003944:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	fa93 f2a3 	rbit	r2, r3
 800394e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003952:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003960:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	fa93 f2a3 	rbit	r2, r3
 8003974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003978:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	4b9c      	ldr	r3, [pc, #624]	; (8003bf0 <HAL_RCC_OscConfig+0xf78>)
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003986:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800398a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800398e:	6011      	str	r1, [r2, #0]
 8003990:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003994:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	fa92 f1a2 	rbit	r1, r2
 800399e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039a2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80039a6:	6011      	str	r1, [r2, #0]
  return result;
 80039a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039ac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	fab2 f282 	clz	r2, r2
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	f042 0220 	orr.w	r2, r2, #32
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	f002 021f 	and.w	r2, r2, #31
 80039c2:	2101      	movs	r1, #1
 80039c4:	fa01 f202 	lsl.w	r2, r1, r2
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d182      	bne.n	80038d4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039ce:	4b88      	ldr	r3, [pc, #544]	; (8003bf0 <HAL_RCC_OscConfig+0xf78>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80039e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	430b      	orrs	r3, r1
 80039f0:	497f      	ldr	r1, [pc, #508]	; (8003bf0 <HAL_RCC_OscConfig+0xf78>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	604b      	str	r3, [r1, #4]
 80039f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80039fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a08:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	fa93 f2a3 	rbit	r2, r3
 8003a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a16:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003a1a:	601a      	str	r2, [r3, #0]
  return result;
 8003a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a20:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003a24:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a26:	fab3 f383 	clz	r3, r3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	461a      	mov	r2, r3
 8003a38:	2301      	movs	r3, #1
 8003a3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7fd ff94 	bl	8001968 <HAL_GetTick>
 8003a40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a44:	e009      	b.n	8003a5a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a46:	f7fd ff8f 	bl	8001968 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e144      	b.n	8003ce4 <HAL_RCC_OscConfig+0x106c>
 8003a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003a62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	fa93 f2a3 	rbit	r2, r3
 8003a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003a7e:	601a      	str	r2, [r3, #0]
  return result;
 8003a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a84:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003a88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a8a:	fab3 f383 	clz	r3, r3
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d102      	bne.n	8003aa4 <HAL_RCC_OscConfig+0xe2c>
 8003a9e:	4b54      	ldr	r3, [pc, #336]	; (8003bf0 <HAL_RCC_OscConfig+0xf78>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	e027      	b.n	8003af4 <HAL_RCC_OscConfig+0xe7c>
 8003aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003aac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	fa93 f2a3 	rbit	r2, r3
 8003ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ace:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003ad2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003adc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	fa93 f2a3 	rbit	r2, r3
 8003ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	4b3f      	ldr	r3, [pc, #252]	; (8003bf0 <HAL_RCC_OscConfig+0xf78>)
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003af8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003afc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b00:	6011      	str	r1, [r2, #0]
 8003b02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b06:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	fa92 f1a2 	rbit	r1, r2
 8003b10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b14:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003b18:	6011      	str	r1, [r2, #0]
  return result;
 8003b1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b1e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	fab2 f282 	clz	r2, r2
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	f042 0220 	orr.w	r2, r2, #32
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	f002 021f 	and.w	r2, r2, #31
 8003b34:	2101      	movs	r1, #1
 8003b36:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d082      	beq.n	8003a46 <HAL_RCC_OscConfig+0xdce>
 8003b40:	e0cf      	b.n	8003ce2 <HAL_RCC_OscConfig+0x106a>
 8003b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b46:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003b4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b54:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	fa93 f2a3 	rbit	r2, r3
 8003b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b62:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003b66:	601a      	str	r2, [r3, #0]
  return result;
 8003b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003b70:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b72:	fab3 f383 	clz	r3, r3
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	461a      	mov	r2, r3
 8003b84:	2300      	movs	r3, #0
 8003b86:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b88:	f7fd feee 	bl	8001968 <HAL_GetTick>
 8003b8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b90:	e009      	b.n	8003ba6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b92:	f7fd fee9 	bl	8001968 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e09e      	b.n	8003ce4 <HAL_RCC_OscConfig+0x106c>
 8003ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003baa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003bae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	fa93 f2a3 	rbit	r2, r3
 8003bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003bca:	601a      	str	r2, [r3, #0]
  return result;
 8003bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003bd4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bd6:	fab3 f383 	clz	r3, r3
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d104      	bne.n	8003bf4 <HAL_RCC_OscConfig+0xf7c>
 8003bea:	4b01      	ldr	r3, [pc, #4]	; (8003bf0 <HAL_RCC_OscConfig+0xf78>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	e029      	b.n	8003c44 <HAL_RCC_OscConfig+0xfcc>
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003bfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c06:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	fa93 f2a3 	rbit	r2, r3
 8003c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c14:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003c22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	fa93 f2a3 	rbit	r2, r3
 8003c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	4b2b      	ldr	r3, [pc, #172]	; (8003cf0 <HAL_RCC_OscConfig+0x1078>)
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c48:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003c4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c50:	6011      	str	r1, [r2, #0]
 8003c52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c56:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	fa92 f1a2 	rbit	r1, r2
 8003c60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c64:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003c68:	6011      	str	r1, [r2, #0]
  return result;
 8003c6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c6e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	fab2 f282 	clz	r2, r2
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	f042 0220 	orr.w	r2, r2, #32
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	f002 021f 	and.w	r2, r2, #31
 8003c84:	2101      	movs	r1, #1
 8003c86:	fa01 f202 	lsl.w	r2, r1, r2
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d180      	bne.n	8003b92 <HAL_RCC_OscConfig+0xf1a>
 8003c90:	e027      	b.n	8003ce2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e01e      	b.n	8003ce4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <HAL_RCC_OscConfig+0x1078>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003cae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003cb2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d10b      	bne.n	8003cde <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003cc6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003cca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d001      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000

08003cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b09e      	sub	sp, #120	; 0x78
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e162      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b90      	ldr	r3, [pc, #576]	; (8003f50 <HAL_RCC_ClockConfig+0x25c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d910      	bls.n	8003d3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b8d      	ldr	r3, [pc, #564]	; (8003f50 <HAL_RCC_ClockConfig+0x25c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 0207 	bic.w	r2, r3, #7
 8003d22:	498b      	ldr	r1, [pc, #556]	; (8003f50 <HAL_RCC_ClockConfig+0x25c>)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2a:	4b89      	ldr	r3, [pc, #548]	; (8003f50 <HAL_RCC_ClockConfig+0x25c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e14a      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d48:	4b82      	ldr	r3, [pc, #520]	; (8003f54 <HAL_RCC_ClockConfig+0x260>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	497f      	ldr	r1, [pc, #508]	; (8003f54 <HAL_RCC_ClockConfig+0x260>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 80dc 	beq.w	8003f20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d13c      	bne.n	8003dea <HAL_RCC_ClockConfig+0xf6>
 8003d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d78:	fa93 f3a3 	rbit	r3, r3
 8003d7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d80:	fab3 f383 	clz	r3, r3
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d102      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xa6>
 8003d94:	4b6f      	ldr	r3, [pc, #444]	; (8003f54 <HAL_RCC_ClockConfig+0x260>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	e00f      	b.n	8003dba <HAL_RCC_ClockConfig+0xc6>
 8003d9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	667b      	str	r3, [r7, #100]	; 0x64
 8003da8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dac:	663b      	str	r3, [r7, #96]	; 0x60
 8003dae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003db0:	fa93 f3a3 	rbit	r3, r3
 8003db4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003db6:	4b67      	ldr	r3, [pc, #412]	; (8003f54 <HAL_RCC_ClockConfig+0x260>)
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003dbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dc2:	fa92 f2a2 	rbit	r2, r2
 8003dc6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003dc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003dca:	fab2 f282 	clz	r2, r2
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	f042 0220 	orr.w	r2, r2, #32
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	f002 021f 	and.w	r2, r2, #31
 8003dda:	2101      	movs	r1, #1
 8003ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d17b      	bne.n	8003ede <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e0f3      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d13c      	bne.n	8003e6c <HAL_RCC_ClockConfig+0x178>
 8003df2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003df6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dfa:	fa93 f3a3 	rbit	r3, r3
 8003dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e02:	fab3 f383 	clz	r3, r3
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	095b      	lsrs	r3, r3, #5
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d102      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x128>
 8003e16:	4b4f      	ldr	r3, [pc, #316]	; (8003f54 <HAL_RCC_ClockConfig+0x260>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	e00f      	b.n	8003e3c <HAL_RCC_ClockConfig+0x148>
 8003e1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e24:	fa93 f3a3 	rbit	r3, r3
 8003e28:	647b      	str	r3, [r7, #68]	; 0x44
 8003e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8003e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e32:	fa93 f3a3 	rbit	r3, r3
 8003e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e38:	4b46      	ldr	r3, [pc, #280]	; (8003f54 <HAL_RCC_ClockConfig+0x260>)
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e40:	63ba      	str	r2, [r7, #56]	; 0x38
 8003e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e44:	fa92 f2a2 	rbit	r2, r2
 8003e48:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003e4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e4c:	fab2 f282 	clz	r2, r2
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	f042 0220 	orr.w	r2, r2, #32
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	f002 021f 	and.w	r2, r2, #31
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d13a      	bne.n	8003ede <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0b2      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x2de>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	fa93 f3a3 	rbit	r3, r3
 8003e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7a:	fab3 f383 	clz	r3, r3
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d102      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x1a0>
 8003e8e:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <HAL_RCC_ClockConfig+0x260>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	e00d      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1bc>
 8003e94:	2302      	movs	r3, #2
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	fa93 f3a3 	rbit	r3, r3
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	623b      	str	r3, [r7, #32]
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	fa93 f3a3 	rbit	r3, r3
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	4b29      	ldr	r3, [pc, #164]	; (8003f54 <HAL_RCC_ClockConfig+0x260>)
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	61ba      	str	r2, [r7, #24]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	fa92 f2a2 	rbit	r2, r2
 8003eba:	617a      	str	r2, [r7, #20]
  return result;
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	fab2 f282 	clz	r2, r2
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	f042 0220 	orr.w	r2, r2, #32
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	f002 021f 	and.w	r2, r2, #31
 8003ece:	2101      	movs	r1, #1
 8003ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e079      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ede:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <HAL_RCC_ClockConfig+0x260>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f023 0203 	bic.w	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	491a      	ldr	r1, [pc, #104]	; (8003f54 <HAL_RCC_ClockConfig+0x260>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef0:	f7fd fd3a 	bl	8001968 <HAL_GetTick>
 8003ef4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef8:	f7fd fd36 	bl	8001968 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e061      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <HAL_RCC_ClockConfig+0x260>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f003 020c 	and.w	r2, r3, #12
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d1eb      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_RCC_ClockConfig+0x25c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d214      	bcs.n	8003f58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <HAL_RCC_ClockConfig+0x25c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 0207 	bic.w	r2, r3, #7
 8003f36:	4906      	ldr	r1, [pc, #24]	; (8003f50 <HAL_RCC_ClockConfig+0x25c>)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3e:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <HAL_RCC_ClockConfig+0x25c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d005      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e040      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x2de>
 8003f50:	40022000 	.word	0x40022000
 8003f54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f64:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <HAL_RCC_ClockConfig+0x2e8>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	491a      	ldr	r1, [pc, #104]	; (8003fdc <HAL_RCC_ClockConfig+0x2e8>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f82:	4b16      	ldr	r3, [pc, #88]	; (8003fdc <HAL_RCC_ClockConfig+0x2e8>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4912      	ldr	r1, [pc, #72]	; (8003fdc <HAL_RCC_ClockConfig+0x2e8>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f96:	f000 f829 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8003f9a:	4601      	mov	r1, r0
 8003f9c:	4b0f      	ldr	r3, [pc, #60]	; (8003fdc <HAL_RCC_ClockConfig+0x2e8>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fa4:	22f0      	movs	r2, #240	; 0xf0
 8003fa6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	fa92 f2a2 	rbit	r2, r2
 8003fae:	60fa      	str	r2, [r7, #12]
  return result;
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	fab2 f282 	clz	r2, r2
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	40d3      	lsrs	r3, r2
 8003fba:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <HAL_RCC_ClockConfig+0x2ec>)
 8003fbc:	5cd3      	ldrb	r3, [r2, r3]
 8003fbe:	fa21 f303 	lsr.w	r3, r1, r3
 8003fc2:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <HAL_RCC_ClockConfig+0x2f0>)
 8003fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003fc6:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <HAL_RCC_ClockConfig+0x2f4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fd fc88 	bl	80018e0 <HAL_InitTick>
  
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3778      	adds	r7, #120	; 0x78
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	08005670 	.word	0x08005670
 8003fe4:	20000090 	.word	0x20000090
 8003fe8:	20000094 	.word	0x20000094

08003fec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b08b      	sub	sp, #44	; 0x2c
 8003ff0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004006:	4b29      	ldr	r3, [pc, #164]	; (80040ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b04      	cmp	r3, #4
 8004014:	d002      	beq.n	800401c <HAL_RCC_GetSysClockFreq+0x30>
 8004016:	2b08      	cmp	r3, #8
 8004018:	d003      	beq.n	8004022 <HAL_RCC_GetSysClockFreq+0x36>
 800401a:	e03c      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800401c:	4b24      	ldr	r3, [pc, #144]	; (80040b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800401e:	623b      	str	r3, [r7, #32]
      break;
 8004020:	e03c      	b.n	800409c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004028:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800402c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	fa92 f2a2 	rbit	r2, r2
 8004034:	607a      	str	r2, [r7, #4]
  return result;
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	fab2 f282 	clz	r2, r2
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	40d3      	lsrs	r3, r2
 8004040:	4a1c      	ldr	r2, [pc, #112]	; (80040b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004042:	5cd3      	ldrb	r3, [r2, r3]
 8004044:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004046:	4b19      	ldr	r3, [pc, #100]	; (80040ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	220f      	movs	r2, #15
 8004050:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	fa92 f2a2 	rbit	r2, r2
 8004058:	60fa      	str	r2, [r7, #12]
  return result;
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	fab2 f282 	clz	r2, r2
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	40d3      	lsrs	r3, r2
 8004064:	4a14      	ldr	r2, [pc, #80]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004066:	5cd3      	ldrb	r3, [r2, r3]
 8004068:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004074:	4a0e      	ldr	r2, [pc, #56]	; (80040b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	fbb2 f2f3 	udiv	r2, r2, r3
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
 8004084:	e004      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	4a0c      	ldr	r2, [pc, #48]	; (80040bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800408a:	fb02 f303 	mul.w	r3, r2, r3
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	623b      	str	r3, [r7, #32]
      break;
 8004094:	e002      	b.n	800409c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004098:	623b      	str	r3, [r7, #32]
      break;
 800409a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409c:	6a3b      	ldr	r3, [r7, #32]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	372c      	adds	r7, #44	; 0x2c
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000
 80040b0:	007a1200 	.word	0x007a1200
 80040b4:	08005688 	.word	0x08005688
 80040b8:	08005698 	.word	0x08005698
 80040bc:	003d0900 	.word	0x003d0900

080040c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c4:	4b03      	ldr	r3, [pc, #12]	; (80040d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040c6:	681b      	ldr	r3, [r3, #0]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	20000090 	.word	0x20000090

080040d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80040de:	f7ff ffef 	bl	80040c0 <HAL_RCC_GetHCLKFreq>
 80040e2:	4601      	mov	r1, r0
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80040f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	fa92 f2a2 	rbit	r2, r2
 80040f8:	603a      	str	r2, [r7, #0]
  return result;
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	fab2 f282 	clz	r2, r2
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	40d3      	lsrs	r3, r2
 8004104:	4a04      	ldr	r2, [pc, #16]	; (8004118 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004106:	5cd3      	ldrb	r3, [r2, r3]
 8004108:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40021000 	.word	0x40021000
 8004118:	08005680 	.word	0x08005680

0800411c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004122:	f7ff ffcd 	bl	80040c0 <HAL_RCC_GetHCLKFreq>
 8004126:	4601      	mov	r1, r0
 8004128:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004130:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004134:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	fa92 f2a2 	rbit	r2, r2
 800413c:	603a      	str	r2, [r7, #0]
  return result;
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	fab2 f282 	clz	r2, r2
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	40d3      	lsrs	r3, r2
 8004148:	4a04      	ldr	r2, [pc, #16]	; (800415c <HAL_RCC_GetPCLK2Freq+0x40>)
 800414a:	5cd3      	ldrb	r3, [r2, r3]
 800414c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021000 	.word	0x40021000
 800415c:	08005680 	.word	0x08005680

08004160 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b092      	sub	sp, #72	; 0x48
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004170:	2300      	movs	r3, #0
 8004172:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 80d4 	beq.w	800432c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004184:	4b4e      	ldr	r3, [pc, #312]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10e      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004190:	4b4b      	ldr	r3, [pc, #300]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	4a4a      	ldr	r2, [pc, #296]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419a:	61d3      	str	r3, [r2, #28]
 800419c:	4b48      	ldr	r3, [pc, #288]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a8:	2301      	movs	r3, #1
 80041aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ae:	4b45      	ldr	r3, [pc, #276]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d118      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ba:	4b42      	ldr	r3, [pc, #264]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a41      	ldr	r2, [pc, #260]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c6:	f7fd fbcf 	bl	8001968 <HAL_GetTick>
 80041ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041cc:	e008      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ce:	f7fd fbcb 	bl	8001968 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b64      	cmp	r3, #100	; 0x64
 80041da:	d901      	bls.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e169      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e0:	4b38      	ldr	r3, [pc, #224]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041ec:	4b34      	ldr	r3, [pc, #208]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 8084 	beq.w	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004206:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004208:	429a      	cmp	r2, r3
 800420a:	d07c      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800420c:	4b2c      	ldr	r3, [pc, #176]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800421a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	fa93 f3a3 	rbit	r3, r3
 8004222:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	4b26      	ldr	r3, [pc, #152]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	461a      	mov	r2, r3
 8004236:	2301      	movs	r3, #1
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800423e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004242:	fa93 f3a3 	rbit	r3, r3
 8004246:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800424a:	fab3 f383 	clz	r3, r3
 800424e:	b2db      	uxtb	r3, r3
 8004250:	461a      	mov	r2, r3
 8004252:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	461a      	mov	r2, r3
 800425a:	2300      	movs	r3, #0
 800425c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800425e:	4a18      	ldr	r2, [pc, #96]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004262:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d04b      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426e:	f7fd fb7b 	bl	8001968 <HAL_GetTick>
 8004272:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004274:	e00a      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004276:	f7fd fb77 	bl	8001968 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	f241 3288 	movw	r2, #5000	; 0x1388
 8004284:	4293      	cmp	r3, r2
 8004286:	d901      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e113      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800428c:	2302      	movs	r3, #2
 800428e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	fa93 f3a3 	rbit	r3, r3
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
 8004298:	2302      	movs	r3, #2
 800429a:	623b      	str	r3, [r7, #32]
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	fa93 f3a3 	rbit	r3, r3
 80042a2:	61fb      	str	r3, [r7, #28]
  return result;
 80042a4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a6:	fab3 f383 	clz	r3, r3
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	f043 0302 	orr.w	r3, r3, #2
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d108      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80042ba:	4b01      	ldr	r3, [pc, #4]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	e00d      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80042c0:	40021000 	.word	0x40021000
 80042c4:	40007000 	.word	0x40007000
 80042c8:	10908100 	.word	0x10908100
 80042cc:	2302      	movs	r3, #2
 80042ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	fa93 f3a3 	rbit	r3, r3
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	4b78      	ldr	r3, [pc, #480]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	2202      	movs	r2, #2
 80042de:	613a      	str	r2, [r7, #16]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	fa92 f2a2 	rbit	r2, r2
 80042e6:	60fa      	str	r2, [r7, #12]
  return result;
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	fab2 f282 	clz	r2, r2
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	f002 021f 	and.w	r2, r2, #31
 80042fa:	2101      	movs	r1, #1
 80042fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004300:	4013      	ands	r3, r2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0b7      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004306:	4b6d      	ldr	r3, [pc, #436]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	496a      	ldr	r1, [pc, #424]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004314:	4313      	orrs	r3, r2
 8004316:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004318:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800431c:	2b01      	cmp	r3, #1
 800431e:	d105      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004320:	4b66      	ldr	r3, [pc, #408]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	4a65      	ldr	r2, [pc, #404]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800432a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004338:	4b60      	ldr	r3, [pc, #384]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	f023 0203 	bic.w	r2, r3, #3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	495d      	ldr	r1, [pc, #372]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004346:	4313      	orrs	r3, r2
 8004348:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d008      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004356:	4b59      	ldr	r3, [pc, #356]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	4956      	ldr	r1, [pc, #344]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d008      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004374:	4b51      	ldr	r3, [pc, #324]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	494e      	ldr	r1, [pc, #312]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004382:	4313      	orrs	r3, r2
 8004384:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d008      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004392:	4b4a      	ldr	r3, [pc, #296]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	f023 0210 	bic.w	r2, r3, #16
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	4947      	ldr	r1, [pc, #284]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80043b0:	4b42      	ldr	r3, [pc, #264]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	493f      	ldr	r1, [pc, #252]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d008      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043ce:	4b3b      	ldr	r3, [pc, #236]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	f023 0220 	bic.w	r2, r3, #32
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	4938      	ldr	r1, [pc, #224]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043ec:	4b33      	ldr	r3, [pc, #204]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	4930      	ldr	r1, [pc, #192]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800440a:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	4929      	ldr	r1, [pc, #164]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004418:	4313      	orrs	r3, r2
 800441a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004428:	4b24      	ldr	r3, [pc, #144]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	4921      	ldr	r1, [pc, #132]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004442:	2b00      	cmp	r3, #0
 8004444:	d008      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004446:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	491a      	ldr	r1, [pc, #104]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004454:	4313      	orrs	r3, r2
 8004456:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004464:	4b15      	ldr	r3, [pc, #84]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	4912      	ldr	r1, [pc, #72]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004472:	4313      	orrs	r3, r2
 8004474:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d008      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004482:	4b0e      	ldr	r3, [pc, #56]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	490b      	ldr	r1, [pc, #44]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004490:	4313      	orrs	r3, r2
 8004492:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80044a0:	4b06      	ldr	r3, [pc, #24]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ac:	4903      	ldr	r1, [pc, #12]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3748      	adds	r7, #72	; 0x48
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40021000 	.word	0x40021000

080044c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e09d      	b.n	800460e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d108      	bne.n	80044ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044e2:	d009      	beq.n	80044f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	61da      	str	r2, [r3, #28]
 80044ea:	e005      	b.n	80044f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fd f89e 	bl	8001654 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800452e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004538:	d902      	bls.n	8004540 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	e002      	b.n	8004546 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004544:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800454e:	d007      	beq.n	8004560 <HAL_SPI_Init+0xa0>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004558:	d002      	beq.n	8004560 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a2:	ea42 0103 	orr.w	r1, r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	0c1b      	lsrs	r3, r3, #16
 80045bc:	f003 0204 	and.w	r2, r3, #4
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045dc:	ea42 0103 	orr.w	r1, r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e040      	b.n	80046aa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d106      	bne.n	800463e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7fd f84d 	bl	80016d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2224      	movs	r2, #36	; 0x24
 8004642:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0201 	bic.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f82d 	bl	80046b4 <UART_SetConfig>
 800465a:	4603      	mov	r3, r0
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e022      	b.n	80046aa <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f9f5 	bl	8004a5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004680:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004690:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0201 	orr.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa7c 	bl	8004ba0 <UART_CheckIdleState>
 80046a8:	4603      	mov	r3, r0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80046e2:	f023 030c 	bic.w	r3, r3, #12
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6812      	ldr	r2, [r2, #0]
 80046ea:	6979      	ldr	r1, [r7, #20]
 80046ec:	430b      	orrs	r3, r1
 80046ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	430a      	orrs	r2, r1
 8004728:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4aa7      	ldr	r2, [pc, #668]	; (80049cc <UART_SetConfig+0x318>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d120      	bne.n	8004776 <UART_SetConfig+0xc2>
 8004734:	4ba6      	ldr	r3, [pc, #664]	; (80049d0 <UART_SetConfig+0x31c>)
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	2b03      	cmp	r3, #3
 800473e:	d817      	bhi.n	8004770 <UART_SetConfig+0xbc>
 8004740:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <UART_SetConfig+0x94>)
 8004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004746:	bf00      	nop
 8004748:	08004759 	.word	0x08004759
 800474c:	08004765 	.word	0x08004765
 8004750:	0800476b 	.word	0x0800476b
 8004754:	0800475f 	.word	0x0800475f
 8004758:	2301      	movs	r3, #1
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e0b5      	b.n	80048ca <UART_SetConfig+0x216>
 800475e:	2302      	movs	r3, #2
 8004760:	77fb      	strb	r3, [r7, #31]
 8004762:	e0b2      	b.n	80048ca <UART_SetConfig+0x216>
 8004764:	2304      	movs	r3, #4
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e0af      	b.n	80048ca <UART_SetConfig+0x216>
 800476a:	2308      	movs	r3, #8
 800476c:	77fb      	strb	r3, [r7, #31]
 800476e:	e0ac      	b.n	80048ca <UART_SetConfig+0x216>
 8004770:	2310      	movs	r3, #16
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e0a9      	b.n	80048ca <UART_SetConfig+0x216>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a96      	ldr	r2, [pc, #600]	; (80049d4 <UART_SetConfig+0x320>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d124      	bne.n	80047ca <UART_SetConfig+0x116>
 8004780:	4b93      	ldr	r3, [pc, #588]	; (80049d0 <UART_SetConfig+0x31c>)
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004788:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800478c:	d011      	beq.n	80047b2 <UART_SetConfig+0xfe>
 800478e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004792:	d817      	bhi.n	80047c4 <UART_SetConfig+0x110>
 8004794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004798:	d011      	beq.n	80047be <UART_SetConfig+0x10a>
 800479a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800479e:	d811      	bhi.n	80047c4 <UART_SetConfig+0x110>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <UART_SetConfig+0xf8>
 80047a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a8:	d006      	beq.n	80047b8 <UART_SetConfig+0x104>
 80047aa:	e00b      	b.n	80047c4 <UART_SetConfig+0x110>
 80047ac:	2300      	movs	r3, #0
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e08b      	b.n	80048ca <UART_SetConfig+0x216>
 80047b2:	2302      	movs	r3, #2
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e088      	b.n	80048ca <UART_SetConfig+0x216>
 80047b8:	2304      	movs	r3, #4
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e085      	b.n	80048ca <UART_SetConfig+0x216>
 80047be:	2308      	movs	r3, #8
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e082      	b.n	80048ca <UART_SetConfig+0x216>
 80047c4:	2310      	movs	r3, #16
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e07f      	b.n	80048ca <UART_SetConfig+0x216>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a82      	ldr	r2, [pc, #520]	; (80049d8 <UART_SetConfig+0x324>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d124      	bne.n	800481e <UART_SetConfig+0x16a>
 80047d4:	4b7e      	ldr	r3, [pc, #504]	; (80049d0 <UART_SetConfig+0x31c>)
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80047dc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80047e0:	d011      	beq.n	8004806 <UART_SetConfig+0x152>
 80047e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80047e6:	d817      	bhi.n	8004818 <UART_SetConfig+0x164>
 80047e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047ec:	d011      	beq.n	8004812 <UART_SetConfig+0x15e>
 80047ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047f2:	d811      	bhi.n	8004818 <UART_SetConfig+0x164>
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <UART_SetConfig+0x14c>
 80047f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047fc:	d006      	beq.n	800480c <UART_SetConfig+0x158>
 80047fe:	e00b      	b.n	8004818 <UART_SetConfig+0x164>
 8004800:	2300      	movs	r3, #0
 8004802:	77fb      	strb	r3, [r7, #31]
 8004804:	e061      	b.n	80048ca <UART_SetConfig+0x216>
 8004806:	2302      	movs	r3, #2
 8004808:	77fb      	strb	r3, [r7, #31]
 800480a:	e05e      	b.n	80048ca <UART_SetConfig+0x216>
 800480c:	2304      	movs	r3, #4
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e05b      	b.n	80048ca <UART_SetConfig+0x216>
 8004812:	2308      	movs	r3, #8
 8004814:	77fb      	strb	r3, [r7, #31]
 8004816:	e058      	b.n	80048ca <UART_SetConfig+0x216>
 8004818:	2310      	movs	r3, #16
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e055      	b.n	80048ca <UART_SetConfig+0x216>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a6e      	ldr	r2, [pc, #440]	; (80049dc <UART_SetConfig+0x328>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d124      	bne.n	8004872 <UART_SetConfig+0x1be>
 8004828:	4b69      	ldr	r3, [pc, #420]	; (80049d0 <UART_SetConfig+0x31c>)
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004830:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004834:	d011      	beq.n	800485a <UART_SetConfig+0x1a6>
 8004836:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800483a:	d817      	bhi.n	800486c <UART_SetConfig+0x1b8>
 800483c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004840:	d011      	beq.n	8004866 <UART_SetConfig+0x1b2>
 8004842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004846:	d811      	bhi.n	800486c <UART_SetConfig+0x1b8>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <UART_SetConfig+0x1a0>
 800484c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004850:	d006      	beq.n	8004860 <UART_SetConfig+0x1ac>
 8004852:	e00b      	b.n	800486c <UART_SetConfig+0x1b8>
 8004854:	2300      	movs	r3, #0
 8004856:	77fb      	strb	r3, [r7, #31]
 8004858:	e037      	b.n	80048ca <UART_SetConfig+0x216>
 800485a:	2302      	movs	r3, #2
 800485c:	77fb      	strb	r3, [r7, #31]
 800485e:	e034      	b.n	80048ca <UART_SetConfig+0x216>
 8004860:	2304      	movs	r3, #4
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e031      	b.n	80048ca <UART_SetConfig+0x216>
 8004866:	2308      	movs	r3, #8
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	e02e      	b.n	80048ca <UART_SetConfig+0x216>
 800486c:	2310      	movs	r3, #16
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e02b      	b.n	80048ca <UART_SetConfig+0x216>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a5a      	ldr	r2, [pc, #360]	; (80049e0 <UART_SetConfig+0x32c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d124      	bne.n	80048c6 <UART_SetConfig+0x212>
 800487c:	4b54      	ldr	r3, [pc, #336]	; (80049d0 <UART_SetConfig+0x31c>)
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004884:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004888:	d011      	beq.n	80048ae <UART_SetConfig+0x1fa>
 800488a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800488e:	d817      	bhi.n	80048c0 <UART_SetConfig+0x20c>
 8004890:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004894:	d011      	beq.n	80048ba <UART_SetConfig+0x206>
 8004896:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800489a:	d811      	bhi.n	80048c0 <UART_SetConfig+0x20c>
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <UART_SetConfig+0x1f4>
 80048a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a4:	d006      	beq.n	80048b4 <UART_SetConfig+0x200>
 80048a6:	e00b      	b.n	80048c0 <UART_SetConfig+0x20c>
 80048a8:	2300      	movs	r3, #0
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e00d      	b.n	80048ca <UART_SetConfig+0x216>
 80048ae:	2302      	movs	r3, #2
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e00a      	b.n	80048ca <UART_SetConfig+0x216>
 80048b4:	2304      	movs	r3, #4
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e007      	b.n	80048ca <UART_SetConfig+0x216>
 80048ba:	2308      	movs	r3, #8
 80048bc:	77fb      	strb	r3, [r7, #31]
 80048be:	e004      	b.n	80048ca <UART_SetConfig+0x216>
 80048c0:	2310      	movs	r3, #16
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e001      	b.n	80048ca <UART_SetConfig+0x216>
 80048c6:	2310      	movs	r3, #16
 80048c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d2:	d15b      	bne.n	800498c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80048d4:	7ffb      	ldrb	r3, [r7, #31]
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d827      	bhi.n	800492a <UART_SetConfig+0x276>
 80048da:	a201      	add	r2, pc, #4	; (adr r2, 80048e0 <UART_SetConfig+0x22c>)
 80048dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e0:	08004905 	.word	0x08004905
 80048e4:	0800490d 	.word	0x0800490d
 80048e8:	08004915 	.word	0x08004915
 80048ec:	0800492b 	.word	0x0800492b
 80048f0:	0800491b 	.word	0x0800491b
 80048f4:	0800492b 	.word	0x0800492b
 80048f8:	0800492b 	.word	0x0800492b
 80048fc:	0800492b 	.word	0x0800492b
 8004900:	08004923 	.word	0x08004923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004904:	f7ff fbe8 	bl	80040d8 <HAL_RCC_GetPCLK1Freq>
 8004908:	61b8      	str	r0, [r7, #24]
        break;
 800490a:	e013      	b.n	8004934 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800490c:	f7ff fc06 	bl	800411c <HAL_RCC_GetPCLK2Freq>
 8004910:	61b8      	str	r0, [r7, #24]
        break;
 8004912:	e00f      	b.n	8004934 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004914:	4b33      	ldr	r3, [pc, #204]	; (80049e4 <UART_SetConfig+0x330>)
 8004916:	61bb      	str	r3, [r7, #24]
        break;
 8004918:	e00c      	b.n	8004934 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800491a:	f7ff fb67 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 800491e:	61b8      	str	r0, [r7, #24]
        break;
 8004920:	e008      	b.n	8004934 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004926:	61bb      	str	r3, [r7, #24]
        break;
 8004928:	e004      	b.n	8004934 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	77bb      	strb	r3, [r7, #30]
        break;
 8004932:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 8082 	beq.w	8004a40 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	005a      	lsls	r2, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	085b      	lsrs	r3, r3, #1
 8004946:	441a      	add	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004950:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b0f      	cmp	r3, #15
 8004956:	d916      	bls.n	8004986 <UART_SetConfig+0x2d2>
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495e:	d212      	bcs.n	8004986 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	b29b      	uxth	r3, r3
 8004964:	f023 030f 	bic.w	r3, r3, #15
 8004968:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	b29b      	uxth	r3, r3
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	b29a      	uxth	r2, r3
 8004976:	89fb      	ldrh	r3, [r7, #14]
 8004978:	4313      	orrs	r3, r2
 800497a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	89fa      	ldrh	r2, [r7, #14]
 8004982:	60da      	str	r2, [r3, #12]
 8004984:	e05c      	b.n	8004a40 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	77bb      	strb	r3, [r7, #30]
 800498a:	e059      	b.n	8004a40 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800498c:	7ffb      	ldrb	r3, [r7, #31]
 800498e:	2b08      	cmp	r3, #8
 8004990:	d835      	bhi.n	80049fe <UART_SetConfig+0x34a>
 8004992:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <UART_SetConfig+0x2e4>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049bd 	.word	0x080049bd
 800499c:	080049c5 	.word	0x080049c5
 80049a0:	080049e9 	.word	0x080049e9
 80049a4:	080049ff 	.word	0x080049ff
 80049a8:	080049ef 	.word	0x080049ef
 80049ac:	080049ff 	.word	0x080049ff
 80049b0:	080049ff 	.word	0x080049ff
 80049b4:	080049ff 	.word	0x080049ff
 80049b8:	080049f7 	.word	0x080049f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049bc:	f7ff fb8c 	bl	80040d8 <HAL_RCC_GetPCLK1Freq>
 80049c0:	61b8      	str	r0, [r7, #24]
        break;
 80049c2:	e021      	b.n	8004a08 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c4:	f7ff fbaa 	bl	800411c <HAL_RCC_GetPCLK2Freq>
 80049c8:	61b8      	str	r0, [r7, #24]
        break;
 80049ca:	e01d      	b.n	8004a08 <UART_SetConfig+0x354>
 80049cc:	40013800 	.word	0x40013800
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40004400 	.word	0x40004400
 80049d8:	40004800 	.word	0x40004800
 80049dc:	40004c00 	.word	0x40004c00
 80049e0:	40005000 	.word	0x40005000
 80049e4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e8:	4b1b      	ldr	r3, [pc, #108]	; (8004a58 <UART_SetConfig+0x3a4>)
 80049ea:	61bb      	str	r3, [r7, #24]
        break;
 80049ec:	e00c      	b.n	8004a08 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ee:	f7ff fafd 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 80049f2:	61b8      	str	r0, [r7, #24]
        break;
 80049f4:	e008      	b.n	8004a08 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049fa:	61bb      	str	r3, [r7, #24]
        break;
 80049fc:	e004      	b.n	8004a08 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	77bb      	strb	r3, [r7, #30]
        break;
 8004a06:	bf00      	nop
    }

    if (pclk != 0U)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d018      	beq.n	8004a40 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	085a      	lsrs	r2, r3, #1
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	441a      	add	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	2b0f      	cmp	r3, #15
 8004a26:	d909      	bls.n	8004a3c <UART_SetConfig+0x388>
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2e:	d205      	bcs.n	8004a3c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	60da      	str	r2, [r3, #12]
 8004a3a:	e001      	b.n	8004a40 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3720      	adds	r7, #32
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	007a1200 	.word	0x007a1200

08004a5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01a      	beq.n	8004b72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b5a:	d10a      	bne.n	8004b72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	605a      	str	r2, [r3, #4]
  }
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b098      	sub	sp, #96	; 0x60
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bb0:	f7fc feda 	bl	8001968 <HAL_GetTick>
 8004bb4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d12e      	bne.n	8004c22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f88c 	bl	8004cf0 <UART_WaitOnFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d021      	beq.n	8004c22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be6:	e853 3f00 	ldrex	r3, [r3]
 8004bea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf2:	653b      	str	r3, [r7, #80]	; 0x50
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bfc:	647b      	str	r3, [r7, #68]	; 0x44
 8004bfe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c04:	e841 2300 	strex	r3, r2, [r1]
 8004c08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1e6      	bne.n	8004bde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e062      	b.n	8004ce8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d149      	bne.n	8004cc4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f856 	bl	8004cf0 <UART_WaitOnFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d03c      	beq.n	8004cc4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	623b      	str	r3, [r7, #32]
   return(result);
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	461a      	mov	r2, r3
 8004c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c68:	633b      	str	r3, [r7, #48]	; 0x30
 8004c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c70:	e841 2300 	strex	r3, r2, [r1]
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1e6      	bne.n	8004c4a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3308      	adds	r3, #8
 8004c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0301 	bic.w	r3, r3, #1
 8004c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3308      	adds	r3, #8
 8004c9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c9c:	61fa      	str	r2, [r7, #28]
 8004c9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	69b9      	ldr	r1, [r7, #24]
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e5      	bne.n	8004c7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e011      	b.n	8004ce8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3758      	adds	r7, #88	; 0x58
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d00:	e049      	b.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d08:	d045      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0a:	f7fc fe2d 	bl	8001968 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d302      	bcc.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e048      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d031      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d110      	bne.n	8004d62 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2208      	movs	r2, #8
 8004d46:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f838 	bl	8004dbe <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2208      	movs	r2, #8
 8004d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e029      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d70:	d111      	bne.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f81e 	bl	8004dbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e00f      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	bf0c      	ite	eq
 8004da6:	2301      	moveq	r3, #1
 8004da8:	2300      	movne	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d0a6      	beq.n	8004d02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b095      	sub	sp, #84	; 0x54
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de4:	643b      	str	r3, [r7, #64]	; 0x40
 8004de6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e6      	bne.n	8004dc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3308      	adds	r3, #8
 8004e16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e5      	bne.n	8004df8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d118      	bne.n	8004e66 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f023 0310 	bic.w	r3, r3, #16
 8004e48:	647b      	str	r3, [r7, #68]	; 0x44
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e52:	61bb      	str	r3, [r7, #24]
 8004e54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e56:	6979      	ldr	r1, [r7, #20]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1e6      	bne.n	8004e34 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e7a:	bf00      	nop
 8004e7c:	3754      	adds	r7, #84	; 0x54
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b085      	sub	sp, #20
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e8e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004e92:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	f107 0014 	add.w	r0, r7, #20
 8004eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	b004      	add	sp, #16
 8004efc:	4770      	bx	lr

08004efe <memset>:
 8004efe:	4402      	add	r2, r0
 8004f00:	4603      	mov	r3, r0
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d100      	bne.n	8004f08 <memset+0xa>
 8004f06:	4770      	bx	lr
 8004f08:	f803 1b01 	strb.w	r1, [r3], #1
 8004f0c:	e7f9      	b.n	8004f02 <memset+0x4>
	...

08004f10 <__errno>:
 8004f10:	4b01      	ldr	r3, [pc, #4]	; (8004f18 <__errno+0x8>)
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	200000e8 	.word	0x200000e8

08004f1c <__libc_init_array>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	4d0d      	ldr	r5, [pc, #52]	; (8004f54 <__libc_init_array+0x38>)
 8004f20:	4c0d      	ldr	r4, [pc, #52]	; (8004f58 <__libc_init_array+0x3c>)
 8004f22:	1b64      	subs	r4, r4, r5
 8004f24:	10a4      	asrs	r4, r4, #2
 8004f26:	2600      	movs	r6, #0
 8004f28:	42a6      	cmp	r6, r4
 8004f2a:	d109      	bne.n	8004f40 <__libc_init_array+0x24>
 8004f2c:	4d0b      	ldr	r5, [pc, #44]	; (8004f5c <__libc_init_array+0x40>)
 8004f2e:	4c0c      	ldr	r4, [pc, #48]	; (8004f60 <__libc_init_array+0x44>)
 8004f30:	f000 fb90 	bl	8005654 <_init>
 8004f34:	1b64      	subs	r4, r4, r5
 8004f36:	10a4      	asrs	r4, r4, #2
 8004f38:	2600      	movs	r6, #0
 8004f3a:	42a6      	cmp	r6, r4
 8004f3c:	d105      	bne.n	8004f4a <__libc_init_array+0x2e>
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f44:	4798      	blx	r3
 8004f46:	3601      	adds	r6, #1
 8004f48:	e7ee      	b.n	8004f28 <__libc_init_array+0xc>
 8004f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f4e:	4798      	blx	r3
 8004f50:	3601      	adds	r6, #1
 8004f52:	e7f2      	b.n	8004f3a <__libc_init_array+0x1e>
 8004f54:	08005718 	.word	0x08005718
 8004f58:	08005718 	.word	0x08005718
 8004f5c:	08005718 	.word	0x08005718
 8004f60:	0800571c 	.word	0x0800571c

08004f64 <atan2>:
 8004f64:	f000 bab0 	b.w	80054c8 <__ieee754_atan2>

08004f68 <sqrt>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	ed2d 8b02 	vpush	{d8}
 8004f6e:	ec55 4b10 	vmov	r4, r5, d0
 8004f72:	f000 f9cf 	bl	8005314 <__ieee754_sqrt>
 8004f76:	4622      	mov	r2, r4
 8004f78:	462b      	mov	r3, r5
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	eeb0 8a40 	vmov.f32	s16, s0
 8004f82:	eef0 8a60 	vmov.f32	s17, s1
 8004f86:	f7fb fd75 	bl	8000a74 <__aeabi_dcmpun>
 8004f8a:	b990      	cbnz	r0, 8004fb2 <sqrt+0x4a>
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2300      	movs	r3, #0
 8004f90:	4620      	mov	r0, r4
 8004f92:	4629      	mov	r1, r5
 8004f94:	f7fb fd46 	bl	8000a24 <__aeabi_dcmplt>
 8004f98:	b158      	cbz	r0, 8004fb2 <sqrt+0x4a>
 8004f9a:	f7ff ffb9 	bl	8004f10 <__errno>
 8004f9e:	2321      	movs	r3, #33	; 0x21
 8004fa0:	6003      	str	r3, [r0, #0]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f7fb fbf3 	bl	8000794 <__aeabi_ddiv>
 8004fae:	ec41 0b18 	vmov	d8, r0, r1
 8004fb2:	eeb0 0a48 	vmov.f32	s0, s16
 8004fb6:	eef0 0a68 	vmov.f32	s1, s17
 8004fba:	ecbd 8b02 	vpop	{d8}
 8004fbe:	bd38      	pop	{r3, r4, r5, pc}

08004fc0 <atan>:
 8004fc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc4:	ec55 4b10 	vmov	r4, r5, d0
 8004fc8:	4bc3      	ldr	r3, [pc, #780]	; (80052d8 <atan+0x318>)
 8004fca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004fce:	429e      	cmp	r6, r3
 8004fd0:	46ab      	mov	fp, r5
 8004fd2:	dd18      	ble.n	8005006 <atan+0x46>
 8004fd4:	4bc1      	ldr	r3, [pc, #772]	; (80052dc <atan+0x31c>)
 8004fd6:	429e      	cmp	r6, r3
 8004fd8:	dc01      	bgt.n	8004fde <atan+0x1e>
 8004fda:	d109      	bne.n	8004ff0 <atan+0x30>
 8004fdc:	b144      	cbz	r4, 8004ff0 <atan+0x30>
 8004fde:	4622      	mov	r2, r4
 8004fe0:	462b      	mov	r3, r5
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	f7fb f8f5 	bl	80001d4 <__adddf3>
 8004fea:	4604      	mov	r4, r0
 8004fec:	460d      	mov	r5, r1
 8004fee:	e006      	b.n	8004ffe <atan+0x3e>
 8004ff0:	f1bb 0f00 	cmp.w	fp, #0
 8004ff4:	f300 8131 	bgt.w	800525a <atan+0x29a>
 8004ff8:	a59b      	add	r5, pc, #620	; (adr r5, 8005268 <atan+0x2a8>)
 8004ffa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004ffe:	ec45 4b10 	vmov	d0, r4, r5
 8005002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005006:	4bb6      	ldr	r3, [pc, #728]	; (80052e0 <atan+0x320>)
 8005008:	429e      	cmp	r6, r3
 800500a:	dc14      	bgt.n	8005036 <atan+0x76>
 800500c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005010:	429e      	cmp	r6, r3
 8005012:	dc0d      	bgt.n	8005030 <atan+0x70>
 8005014:	a396      	add	r3, pc, #600	; (adr r3, 8005270 <atan+0x2b0>)
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	ee10 0a10 	vmov	r0, s0
 800501e:	4629      	mov	r1, r5
 8005020:	f7fb f8d8 	bl	80001d4 <__adddf3>
 8005024:	4baf      	ldr	r3, [pc, #700]	; (80052e4 <atan+0x324>)
 8005026:	2200      	movs	r2, #0
 8005028:	f7fb fd1a 	bl	8000a60 <__aeabi_dcmpgt>
 800502c:	2800      	cmp	r0, #0
 800502e:	d1e6      	bne.n	8004ffe <atan+0x3e>
 8005030:	f04f 3aff 	mov.w	sl, #4294967295
 8005034:	e02b      	b.n	800508e <atan+0xce>
 8005036:	f000 f963 	bl	8005300 <fabs>
 800503a:	4bab      	ldr	r3, [pc, #684]	; (80052e8 <atan+0x328>)
 800503c:	429e      	cmp	r6, r3
 800503e:	ec55 4b10 	vmov	r4, r5, d0
 8005042:	f300 80bf 	bgt.w	80051c4 <atan+0x204>
 8005046:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800504a:	429e      	cmp	r6, r3
 800504c:	f300 80a0 	bgt.w	8005190 <atan+0x1d0>
 8005050:	ee10 2a10 	vmov	r2, s0
 8005054:	ee10 0a10 	vmov	r0, s0
 8005058:	462b      	mov	r3, r5
 800505a:	4629      	mov	r1, r5
 800505c:	f7fb f8ba 	bl	80001d4 <__adddf3>
 8005060:	4ba0      	ldr	r3, [pc, #640]	; (80052e4 <atan+0x324>)
 8005062:	2200      	movs	r2, #0
 8005064:	f7fb f8b4 	bl	80001d0 <__aeabi_dsub>
 8005068:	2200      	movs	r2, #0
 800506a:	4606      	mov	r6, r0
 800506c:	460f      	mov	r7, r1
 800506e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005072:	4620      	mov	r0, r4
 8005074:	4629      	mov	r1, r5
 8005076:	f7fb f8ad 	bl	80001d4 <__adddf3>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4630      	mov	r0, r6
 8005080:	4639      	mov	r1, r7
 8005082:	f7fb fb87 	bl	8000794 <__aeabi_ddiv>
 8005086:	f04f 0a00 	mov.w	sl, #0
 800508a:	4604      	mov	r4, r0
 800508c:	460d      	mov	r5, r1
 800508e:	4622      	mov	r2, r4
 8005090:	462b      	mov	r3, r5
 8005092:	4620      	mov	r0, r4
 8005094:	4629      	mov	r1, r5
 8005096:	f7fb fa53 	bl	8000540 <__aeabi_dmul>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4680      	mov	r8, r0
 80050a0:	4689      	mov	r9, r1
 80050a2:	f7fb fa4d 	bl	8000540 <__aeabi_dmul>
 80050a6:	a374      	add	r3, pc, #464	; (adr r3, 8005278 <atan+0x2b8>)
 80050a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ac:	4606      	mov	r6, r0
 80050ae:	460f      	mov	r7, r1
 80050b0:	f7fb fa46 	bl	8000540 <__aeabi_dmul>
 80050b4:	a372      	add	r3, pc, #456	; (adr r3, 8005280 <atan+0x2c0>)
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	f7fb f88b 	bl	80001d4 <__adddf3>
 80050be:	4632      	mov	r2, r6
 80050c0:	463b      	mov	r3, r7
 80050c2:	f7fb fa3d 	bl	8000540 <__aeabi_dmul>
 80050c6:	a370      	add	r3, pc, #448	; (adr r3, 8005288 <atan+0x2c8>)
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f7fb f882 	bl	80001d4 <__adddf3>
 80050d0:	4632      	mov	r2, r6
 80050d2:	463b      	mov	r3, r7
 80050d4:	f7fb fa34 	bl	8000540 <__aeabi_dmul>
 80050d8:	a36d      	add	r3, pc, #436	; (adr r3, 8005290 <atan+0x2d0>)
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	f7fb f879 	bl	80001d4 <__adddf3>
 80050e2:	4632      	mov	r2, r6
 80050e4:	463b      	mov	r3, r7
 80050e6:	f7fb fa2b 	bl	8000540 <__aeabi_dmul>
 80050ea:	a36b      	add	r3, pc, #428	; (adr r3, 8005298 <atan+0x2d8>)
 80050ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f0:	f7fb f870 	bl	80001d4 <__adddf3>
 80050f4:	4632      	mov	r2, r6
 80050f6:	463b      	mov	r3, r7
 80050f8:	f7fb fa22 	bl	8000540 <__aeabi_dmul>
 80050fc:	a368      	add	r3, pc, #416	; (adr r3, 80052a0 <atan+0x2e0>)
 80050fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005102:	f7fb f867 	bl	80001d4 <__adddf3>
 8005106:	4642      	mov	r2, r8
 8005108:	464b      	mov	r3, r9
 800510a:	f7fb fa19 	bl	8000540 <__aeabi_dmul>
 800510e:	a366      	add	r3, pc, #408	; (adr r3, 80052a8 <atan+0x2e8>)
 8005110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005114:	4680      	mov	r8, r0
 8005116:	4689      	mov	r9, r1
 8005118:	4630      	mov	r0, r6
 800511a:	4639      	mov	r1, r7
 800511c:	f7fb fa10 	bl	8000540 <__aeabi_dmul>
 8005120:	a363      	add	r3, pc, #396	; (adr r3, 80052b0 <atan+0x2f0>)
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	f7fb f853 	bl	80001d0 <__aeabi_dsub>
 800512a:	4632      	mov	r2, r6
 800512c:	463b      	mov	r3, r7
 800512e:	f7fb fa07 	bl	8000540 <__aeabi_dmul>
 8005132:	a361      	add	r3, pc, #388	; (adr r3, 80052b8 <atan+0x2f8>)
 8005134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005138:	f7fb f84a 	bl	80001d0 <__aeabi_dsub>
 800513c:	4632      	mov	r2, r6
 800513e:	463b      	mov	r3, r7
 8005140:	f7fb f9fe 	bl	8000540 <__aeabi_dmul>
 8005144:	a35e      	add	r3, pc, #376	; (adr r3, 80052c0 <atan+0x300>)
 8005146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514a:	f7fb f841 	bl	80001d0 <__aeabi_dsub>
 800514e:	4632      	mov	r2, r6
 8005150:	463b      	mov	r3, r7
 8005152:	f7fb f9f5 	bl	8000540 <__aeabi_dmul>
 8005156:	a35c      	add	r3, pc, #368	; (adr r3, 80052c8 <atan+0x308>)
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f7fb f838 	bl	80001d0 <__aeabi_dsub>
 8005160:	4632      	mov	r2, r6
 8005162:	463b      	mov	r3, r7
 8005164:	f7fb f9ec 	bl	8000540 <__aeabi_dmul>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4640      	mov	r0, r8
 800516e:	4649      	mov	r1, r9
 8005170:	f7fb f830 	bl	80001d4 <__adddf3>
 8005174:	4622      	mov	r2, r4
 8005176:	462b      	mov	r3, r5
 8005178:	f7fb f9e2 	bl	8000540 <__aeabi_dmul>
 800517c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	d14b      	bne.n	800521e <atan+0x25e>
 8005186:	4620      	mov	r0, r4
 8005188:	4629      	mov	r1, r5
 800518a:	f7fb f821 	bl	80001d0 <__aeabi_dsub>
 800518e:	e72c      	b.n	8004fea <atan+0x2a>
 8005190:	ee10 0a10 	vmov	r0, s0
 8005194:	4b53      	ldr	r3, [pc, #332]	; (80052e4 <atan+0x324>)
 8005196:	2200      	movs	r2, #0
 8005198:	4629      	mov	r1, r5
 800519a:	f7fb f819 	bl	80001d0 <__aeabi_dsub>
 800519e:	4b51      	ldr	r3, [pc, #324]	; (80052e4 <atan+0x324>)
 80051a0:	4606      	mov	r6, r0
 80051a2:	460f      	mov	r7, r1
 80051a4:	2200      	movs	r2, #0
 80051a6:	4620      	mov	r0, r4
 80051a8:	4629      	mov	r1, r5
 80051aa:	f7fb f813 	bl	80001d4 <__adddf3>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4630      	mov	r0, r6
 80051b4:	4639      	mov	r1, r7
 80051b6:	f7fb faed 	bl	8000794 <__aeabi_ddiv>
 80051ba:	f04f 0a01 	mov.w	sl, #1
 80051be:	4604      	mov	r4, r0
 80051c0:	460d      	mov	r5, r1
 80051c2:	e764      	b.n	800508e <atan+0xce>
 80051c4:	4b49      	ldr	r3, [pc, #292]	; (80052ec <atan+0x32c>)
 80051c6:	429e      	cmp	r6, r3
 80051c8:	da1d      	bge.n	8005206 <atan+0x246>
 80051ca:	ee10 0a10 	vmov	r0, s0
 80051ce:	4b48      	ldr	r3, [pc, #288]	; (80052f0 <atan+0x330>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	4629      	mov	r1, r5
 80051d4:	f7fa fffc 	bl	80001d0 <__aeabi_dsub>
 80051d8:	4b45      	ldr	r3, [pc, #276]	; (80052f0 <atan+0x330>)
 80051da:	4606      	mov	r6, r0
 80051dc:	460f      	mov	r7, r1
 80051de:	2200      	movs	r2, #0
 80051e0:	4620      	mov	r0, r4
 80051e2:	4629      	mov	r1, r5
 80051e4:	f7fb f9ac 	bl	8000540 <__aeabi_dmul>
 80051e8:	4b3e      	ldr	r3, [pc, #248]	; (80052e4 <atan+0x324>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	f7fa fff2 	bl	80001d4 <__adddf3>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4630      	mov	r0, r6
 80051f6:	4639      	mov	r1, r7
 80051f8:	f7fb facc 	bl	8000794 <__aeabi_ddiv>
 80051fc:	f04f 0a02 	mov.w	sl, #2
 8005200:	4604      	mov	r4, r0
 8005202:	460d      	mov	r5, r1
 8005204:	e743      	b.n	800508e <atan+0xce>
 8005206:	462b      	mov	r3, r5
 8005208:	ee10 2a10 	vmov	r2, s0
 800520c:	4939      	ldr	r1, [pc, #228]	; (80052f4 <atan+0x334>)
 800520e:	2000      	movs	r0, #0
 8005210:	f7fb fac0 	bl	8000794 <__aeabi_ddiv>
 8005214:	f04f 0a03 	mov.w	sl, #3
 8005218:	4604      	mov	r4, r0
 800521a:	460d      	mov	r5, r1
 800521c:	e737      	b.n	800508e <atan+0xce>
 800521e:	4b36      	ldr	r3, [pc, #216]	; (80052f8 <atan+0x338>)
 8005220:	4e36      	ldr	r6, [pc, #216]	; (80052fc <atan+0x33c>)
 8005222:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f7fa ffd1 	bl	80001d0 <__aeabi_dsub>
 800522e:	4622      	mov	r2, r4
 8005230:	462b      	mov	r3, r5
 8005232:	f7fa ffcd 	bl	80001d0 <__aeabi_dsub>
 8005236:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005242:	f7fa ffc5 	bl	80001d0 <__aeabi_dsub>
 8005246:	f1bb 0f00 	cmp.w	fp, #0
 800524a:	4604      	mov	r4, r0
 800524c:	460d      	mov	r5, r1
 800524e:	f6bf aed6 	bge.w	8004ffe <atan+0x3e>
 8005252:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005256:	461d      	mov	r5, r3
 8005258:	e6d1      	b.n	8004ffe <atan+0x3e>
 800525a:	a51d      	add	r5, pc, #116	; (adr r5, 80052d0 <atan+0x310>)
 800525c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005260:	e6cd      	b.n	8004ffe <atan+0x3e>
 8005262:	bf00      	nop
 8005264:	f3af 8000 	nop.w
 8005268:	54442d18 	.word	0x54442d18
 800526c:	bff921fb 	.word	0xbff921fb
 8005270:	8800759c 	.word	0x8800759c
 8005274:	7e37e43c 	.word	0x7e37e43c
 8005278:	e322da11 	.word	0xe322da11
 800527c:	3f90ad3a 	.word	0x3f90ad3a
 8005280:	24760deb 	.word	0x24760deb
 8005284:	3fa97b4b 	.word	0x3fa97b4b
 8005288:	a0d03d51 	.word	0xa0d03d51
 800528c:	3fb10d66 	.word	0x3fb10d66
 8005290:	c54c206e 	.word	0xc54c206e
 8005294:	3fb745cd 	.word	0x3fb745cd
 8005298:	920083ff 	.word	0x920083ff
 800529c:	3fc24924 	.word	0x3fc24924
 80052a0:	5555550d 	.word	0x5555550d
 80052a4:	3fd55555 	.word	0x3fd55555
 80052a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80052ac:	bfa2b444 	.word	0xbfa2b444
 80052b0:	52defd9a 	.word	0x52defd9a
 80052b4:	3fadde2d 	.word	0x3fadde2d
 80052b8:	af749a6d 	.word	0xaf749a6d
 80052bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80052c0:	fe231671 	.word	0xfe231671
 80052c4:	3fbc71c6 	.word	0x3fbc71c6
 80052c8:	9998ebc4 	.word	0x9998ebc4
 80052cc:	3fc99999 	.word	0x3fc99999
 80052d0:	54442d18 	.word	0x54442d18
 80052d4:	3ff921fb 	.word	0x3ff921fb
 80052d8:	440fffff 	.word	0x440fffff
 80052dc:	7ff00000 	.word	0x7ff00000
 80052e0:	3fdbffff 	.word	0x3fdbffff
 80052e4:	3ff00000 	.word	0x3ff00000
 80052e8:	3ff2ffff 	.word	0x3ff2ffff
 80052ec:	40038000 	.word	0x40038000
 80052f0:	3ff80000 	.word	0x3ff80000
 80052f4:	bff00000 	.word	0xbff00000
 80052f8:	080056c8 	.word	0x080056c8
 80052fc:	080056a8 	.word	0x080056a8

08005300 <fabs>:
 8005300:	ec51 0b10 	vmov	r0, r1, d0
 8005304:	ee10 2a10 	vmov	r2, s0
 8005308:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800530c:	ec43 2b10 	vmov	d0, r2, r3
 8005310:	4770      	bx	lr
	...

08005314 <__ieee754_sqrt>:
 8005314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005318:	ec55 4b10 	vmov	r4, r5, d0
 800531c:	4e67      	ldr	r6, [pc, #412]	; (80054bc <__ieee754_sqrt+0x1a8>)
 800531e:	43ae      	bics	r6, r5
 8005320:	ee10 0a10 	vmov	r0, s0
 8005324:	ee10 2a10 	vmov	r2, s0
 8005328:	4629      	mov	r1, r5
 800532a:	462b      	mov	r3, r5
 800532c:	d10d      	bne.n	800534a <__ieee754_sqrt+0x36>
 800532e:	f7fb f907 	bl	8000540 <__aeabi_dmul>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4620      	mov	r0, r4
 8005338:	4629      	mov	r1, r5
 800533a:	f7fa ff4b 	bl	80001d4 <__adddf3>
 800533e:	4604      	mov	r4, r0
 8005340:	460d      	mov	r5, r1
 8005342:	ec45 4b10 	vmov	d0, r4, r5
 8005346:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534a:	2d00      	cmp	r5, #0
 800534c:	dc0b      	bgt.n	8005366 <__ieee754_sqrt+0x52>
 800534e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005352:	4326      	orrs	r6, r4
 8005354:	d0f5      	beq.n	8005342 <__ieee754_sqrt+0x2e>
 8005356:	b135      	cbz	r5, 8005366 <__ieee754_sqrt+0x52>
 8005358:	f7fa ff3a 	bl	80001d0 <__aeabi_dsub>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	f7fb fa18 	bl	8000794 <__aeabi_ddiv>
 8005364:	e7eb      	b.n	800533e <__ieee754_sqrt+0x2a>
 8005366:	1509      	asrs	r1, r1, #20
 8005368:	f000 808d 	beq.w	8005486 <__ieee754_sqrt+0x172>
 800536c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005370:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8005374:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005378:	07c9      	lsls	r1, r1, #31
 800537a:	bf5c      	itt	pl
 800537c:	005b      	lslpl	r3, r3, #1
 800537e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8005382:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005386:	bf58      	it	pl
 8005388:	0052      	lslpl	r2, r2, #1
 800538a:	2500      	movs	r5, #0
 800538c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005390:	1076      	asrs	r6, r6, #1
 8005392:	0052      	lsls	r2, r2, #1
 8005394:	f04f 0e16 	mov.w	lr, #22
 8005398:	46ac      	mov	ip, r5
 800539a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800539e:	eb0c 0001 	add.w	r0, ip, r1
 80053a2:	4298      	cmp	r0, r3
 80053a4:	bfde      	ittt	le
 80053a6:	1a1b      	suble	r3, r3, r0
 80053a8:	eb00 0c01 	addle.w	ip, r0, r1
 80053ac:	186d      	addle	r5, r5, r1
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	f1be 0e01 	subs.w	lr, lr, #1
 80053b4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80053b8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80053bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80053c0:	d1ed      	bne.n	800539e <__ieee754_sqrt+0x8a>
 80053c2:	4674      	mov	r4, lr
 80053c4:	2720      	movs	r7, #32
 80053c6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80053ca:	4563      	cmp	r3, ip
 80053cc:	eb01 000e 	add.w	r0, r1, lr
 80053d0:	dc02      	bgt.n	80053d8 <__ieee754_sqrt+0xc4>
 80053d2:	d113      	bne.n	80053fc <__ieee754_sqrt+0xe8>
 80053d4:	4290      	cmp	r0, r2
 80053d6:	d811      	bhi.n	80053fc <__ieee754_sqrt+0xe8>
 80053d8:	2800      	cmp	r0, #0
 80053da:	eb00 0e01 	add.w	lr, r0, r1
 80053de:	da57      	bge.n	8005490 <__ieee754_sqrt+0x17c>
 80053e0:	f1be 0f00 	cmp.w	lr, #0
 80053e4:	db54      	blt.n	8005490 <__ieee754_sqrt+0x17c>
 80053e6:	f10c 0801 	add.w	r8, ip, #1
 80053ea:	eba3 030c 	sub.w	r3, r3, ip
 80053ee:	4290      	cmp	r0, r2
 80053f0:	bf88      	it	hi
 80053f2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80053f6:	1a12      	subs	r2, r2, r0
 80053f8:	440c      	add	r4, r1
 80053fa:	46c4      	mov	ip, r8
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	3f01      	subs	r7, #1
 8005400:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005404:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005408:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800540c:	d1dd      	bne.n	80053ca <__ieee754_sqrt+0xb6>
 800540e:	4313      	orrs	r3, r2
 8005410:	d01b      	beq.n	800544a <__ieee754_sqrt+0x136>
 8005412:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80054c0 <__ieee754_sqrt+0x1ac>
 8005416:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80054c4 <__ieee754_sqrt+0x1b0>
 800541a:	e9da 0100 	ldrd	r0, r1, [sl]
 800541e:	e9db 2300 	ldrd	r2, r3, [fp]
 8005422:	f7fa fed5 	bl	80001d0 <__aeabi_dsub>
 8005426:	e9da 8900 	ldrd	r8, r9, [sl]
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	4640      	mov	r0, r8
 8005430:	4649      	mov	r1, r9
 8005432:	f7fb fb01 	bl	8000a38 <__aeabi_dcmple>
 8005436:	b140      	cbz	r0, 800544a <__ieee754_sqrt+0x136>
 8005438:	f1b4 3fff 	cmp.w	r4, #4294967295
 800543c:	e9da 0100 	ldrd	r0, r1, [sl]
 8005440:	e9db 2300 	ldrd	r2, r3, [fp]
 8005444:	d126      	bne.n	8005494 <__ieee754_sqrt+0x180>
 8005446:	3501      	adds	r5, #1
 8005448:	463c      	mov	r4, r7
 800544a:	106a      	asrs	r2, r5, #1
 800544c:	0863      	lsrs	r3, r4, #1
 800544e:	07e9      	lsls	r1, r5, #31
 8005450:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005454:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005458:	bf48      	it	mi
 800545a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800545e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8005462:	461c      	mov	r4, r3
 8005464:	e76d      	b.n	8005342 <__ieee754_sqrt+0x2e>
 8005466:	0ad3      	lsrs	r3, r2, #11
 8005468:	3815      	subs	r0, #21
 800546a:	0552      	lsls	r2, r2, #21
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0fa      	beq.n	8005466 <__ieee754_sqrt+0x152>
 8005470:	02dc      	lsls	r4, r3, #11
 8005472:	d50a      	bpl.n	800548a <__ieee754_sqrt+0x176>
 8005474:	f1c1 0420 	rsb	r4, r1, #32
 8005478:	fa22 f404 	lsr.w	r4, r2, r4
 800547c:	1e4d      	subs	r5, r1, #1
 800547e:	408a      	lsls	r2, r1
 8005480:	4323      	orrs	r3, r4
 8005482:	1b41      	subs	r1, r0, r5
 8005484:	e772      	b.n	800536c <__ieee754_sqrt+0x58>
 8005486:	4608      	mov	r0, r1
 8005488:	e7f0      	b.n	800546c <__ieee754_sqrt+0x158>
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	3101      	adds	r1, #1
 800548e:	e7ef      	b.n	8005470 <__ieee754_sqrt+0x15c>
 8005490:	46e0      	mov	r8, ip
 8005492:	e7aa      	b.n	80053ea <__ieee754_sqrt+0xd6>
 8005494:	f7fa fe9e 	bl	80001d4 <__adddf3>
 8005498:	e9da 8900 	ldrd	r8, r9, [sl]
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4640      	mov	r0, r8
 80054a2:	4649      	mov	r1, r9
 80054a4:	f7fb fabe 	bl	8000a24 <__aeabi_dcmplt>
 80054a8:	b120      	cbz	r0, 80054b4 <__ieee754_sqrt+0x1a0>
 80054aa:	1ca0      	adds	r0, r4, #2
 80054ac:	bf08      	it	eq
 80054ae:	3501      	addeq	r5, #1
 80054b0:	3402      	adds	r4, #2
 80054b2:	e7ca      	b.n	800544a <__ieee754_sqrt+0x136>
 80054b4:	3401      	adds	r4, #1
 80054b6:	f024 0401 	bic.w	r4, r4, #1
 80054ba:	e7c6      	b.n	800544a <__ieee754_sqrt+0x136>
 80054bc:	7ff00000 	.word	0x7ff00000
 80054c0:	200000f0 	.word	0x200000f0
 80054c4:	200000f8 	.word	0x200000f8

080054c8 <__ieee754_atan2>:
 80054c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054cc:	ec57 6b11 	vmov	r6, r7, d1
 80054d0:	4273      	negs	r3, r6
 80054d2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8005650 <__ieee754_atan2+0x188>
 80054d6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80054da:	4333      	orrs	r3, r6
 80054dc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80054e0:	4543      	cmp	r3, r8
 80054e2:	ec51 0b10 	vmov	r0, r1, d0
 80054e6:	ee11 5a10 	vmov	r5, s2
 80054ea:	d80a      	bhi.n	8005502 <__ieee754_atan2+0x3a>
 80054ec:	4244      	negs	r4, r0
 80054ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80054f2:	4304      	orrs	r4, r0
 80054f4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80054f8:	4544      	cmp	r4, r8
 80054fa:	ee10 9a10 	vmov	r9, s0
 80054fe:	468e      	mov	lr, r1
 8005500:	d907      	bls.n	8005512 <__ieee754_atan2+0x4a>
 8005502:	4632      	mov	r2, r6
 8005504:	463b      	mov	r3, r7
 8005506:	f7fa fe65 	bl	80001d4 <__adddf3>
 800550a:	ec41 0b10 	vmov	d0, r0, r1
 800550e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005512:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8005516:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800551a:	4334      	orrs	r4, r6
 800551c:	d103      	bne.n	8005526 <__ieee754_atan2+0x5e>
 800551e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005522:	f7ff bd4d 	b.w	8004fc0 <atan>
 8005526:	17bc      	asrs	r4, r7, #30
 8005528:	f004 0402 	and.w	r4, r4, #2
 800552c:	ea53 0909 	orrs.w	r9, r3, r9
 8005530:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005534:	d107      	bne.n	8005546 <__ieee754_atan2+0x7e>
 8005536:	2c02      	cmp	r4, #2
 8005538:	d05f      	beq.n	80055fa <__ieee754_atan2+0x132>
 800553a:	2c03      	cmp	r4, #3
 800553c:	d1e5      	bne.n	800550a <__ieee754_atan2+0x42>
 800553e:	a140      	add	r1, pc, #256	; (adr r1, 8005640 <__ieee754_atan2+0x178>)
 8005540:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005544:	e7e1      	b.n	800550a <__ieee754_atan2+0x42>
 8005546:	4315      	orrs	r5, r2
 8005548:	d106      	bne.n	8005558 <__ieee754_atan2+0x90>
 800554a:	f1be 0f00 	cmp.w	lr, #0
 800554e:	da5f      	bge.n	8005610 <__ieee754_atan2+0x148>
 8005550:	a13d      	add	r1, pc, #244	; (adr r1, 8005648 <__ieee754_atan2+0x180>)
 8005552:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005556:	e7d8      	b.n	800550a <__ieee754_atan2+0x42>
 8005558:	4542      	cmp	r2, r8
 800555a:	d10f      	bne.n	800557c <__ieee754_atan2+0xb4>
 800555c:	4293      	cmp	r3, r2
 800555e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005562:	d107      	bne.n	8005574 <__ieee754_atan2+0xac>
 8005564:	2c02      	cmp	r4, #2
 8005566:	d84c      	bhi.n	8005602 <__ieee754_atan2+0x13a>
 8005568:	4b33      	ldr	r3, [pc, #204]	; (8005638 <__ieee754_atan2+0x170>)
 800556a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800556e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005572:	e7ca      	b.n	800550a <__ieee754_atan2+0x42>
 8005574:	2c02      	cmp	r4, #2
 8005576:	d848      	bhi.n	800560a <__ieee754_atan2+0x142>
 8005578:	4b30      	ldr	r3, [pc, #192]	; (800563c <__ieee754_atan2+0x174>)
 800557a:	e7f6      	b.n	800556a <__ieee754_atan2+0xa2>
 800557c:	4543      	cmp	r3, r8
 800557e:	d0e4      	beq.n	800554a <__ieee754_atan2+0x82>
 8005580:	1a9b      	subs	r3, r3, r2
 8005582:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005586:	ea4f 5223 	mov.w	r2, r3, asr #20
 800558a:	da1e      	bge.n	80055ca <__ieee754_atan2+0x102>
 800558c:	2f00      	cmp	r7, #0
 800558e:	da01      	bge.n	8005594 <__ieee754_atan2+0xcc>
 8005590:	323c      	adds	r2, #60	; 0x3c
 8005592:	db1e      	blt.n	80055d2 <__ieee754_atan2+0x10a>
 8005594:	4632      	mov	r2, r6
 8005596:	463b      	mov	r3, r7
 8005598:	f7fb f8fc 	bl	8000794 <__aeabi_ddiv>
 800559c:	ec41 0b10 	vmov	d0, r0, r1
 80055a0:	f7ff feae 	bl	8005300 <fabs>
 80055a4:	f7ff fd0c 	bl	8004fc0 <atan>
 80055a8:	ec51 0b10 	vmov	r0, r1, d0
 80055ac:	2c01      	cmp	r4, #1
 80055ae:	d013      	beq.n	80055d8 <__ieee754_atan2+0x110>
 80055b0:	2c02      	cmp	r4, #2
 80055b2:	d015      	beq.n	80055e0 <__ieee754_atan2+0x118>
 80055b4:	2c00      	cmp	r4, #0
 80055b6:	d0a8      	beq.n	800550a <__ieee754_atan2+0x42>
 80055b8:	a317      	add	r3, pc, #92	; (adr r3, 8005618 <__ieee754_atan2+0x150>)
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	f7fa fe07 	bl	80001d0 <__aeabi_dsub>
 80055c2:	a317      	add	r3, pc, #92	; (adr r3, 8005620 <__ieee754_atan2+0x158>)
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	e014      	b.n	80055f4 <__ieee754_atan2+0x12c>
 80055ca:	a117      	add	r1, pc, #92	; (adr r1, 8005628 <__ieee754_atan2+0x160>)
 80055cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055d0:	e7ec      	b.n	80055ac <__ieee754_atan2+0xe4>
 80055d2:	2000      	movs	r0, #0
 80055d4:	2100      	movs	r1, #0
 80055d6:	e7e9      	b.n	80055ac <__ieee754_atan2+0xe4>
 80055d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055dc:	4619      	mov	r1, r3
 80055de:	e794      	b.n	800550a <__ieee754_atan2+0x42>
 80055e0:	a30d      	add	r3, pc, #52	; (adr r3, 8005618 <__ieee754_atan2+0x150>)
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f7fa fdf3 	bl	80001d0 <__aeabi_dsub>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	a10c      	add	r1, pc, #48	; (adr r1, 8005620 <__ieee754_atan2+0x158>)
 80055f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055f4:	f7fa fdec 	bl	80001d0 <__aeabi_dsub>
 80055f8:	e787      	b.n	800550a <__ieee754_atan2+0x42>
 80055fa:	a109      	add	r1, pc, #36	; (adr r1, 8005620 <__ieee754_atan2+0x158>)
 80055fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005600:	e783      	b.n	800550a <__ieee754_atan2+0x42>
 8005602:	a10b      	add	r1, pc, #44	; (adr r1, 8005630 <__ieee754_atan2+0x168>)
 8005604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005608:	e77f      	b.n	800550a <__ieee754_atan2+0x42>
 800560a:	2000      	movs	r0, #0
 800560c:	2100      	movs	r1, #0
 800560e:	e77c      	b.n	800550a <__ieee754_atan2+0x42>
 8005610:	a105      	add	r1, pc, #20	; (adr r1, 8005628 <__ieee754_atan2+0x160>)
 8005612:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005616:	e778      	b.n	800550a <__ieee754_atan2+0x42>
 8005618:	33145c07 	.word	0x33145c07
 800561c:	3ca1a626 	.word	0x3ca1a626
 8005620:	54442d18 	.word	0x54442d18
 8005624:	400921fb 	.word	0x400921fb
 8005628:	54442d18 	.word	0x54442d18
 800562c:	3ff921fb 	.word	0x3ff921fb
 8005630:	54442d18 	.word	0x54442d18
 8005634:	3fe921fb 	.word	0x3fe921fb
 8005638:	080056e8 	.word	0x080056e8
 800563c:	08005700 	.word	0x08005700
 8005640:	54442d18 	.word	0x54442d18
 8005644:	c00921fb 	.word	0xc00921fb
 8005648:	54442d18 	.word	0x54442d18
 800564c:	bff921fb 	.word	0xbff921fb
 8005650:	7ff00000 	.word	0x7ff00000

08005654 <_init>:
 8005654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005656:	bf00      	nop
 8005658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565a:	bc08      	pop	{r3}
 800565c:	469e      	mov	lr, r3
 800565e:	4770      	bx	lr

08005660 <_fini>:
 8005660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005662:	bf00      	nop
 8005664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005666:	bc08      	pop	{r3}
 8005668:	469e      	mov	lr, r3
 800566a:	4770      	bx	lr
